<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Algorithm</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Algorithm.CandlestickPatterns">
            <summary>
            Provides helpers for using candlestick patterns
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.#ctor(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.CandlestickPatterns"/> class
            </summary>
            <param name="algorithm">The algorithm instance</param>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.TwoCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeBlackCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeInside(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeLineStrike(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeOutside(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeStarsInSouth(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeWhiteSoldiers(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.AbandonedBaby(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.AdvanceBlock(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.BeltHold(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Breakaway(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ClosingMarubozu(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ConcealedBabySwallow(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Counterattack(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.DarkCloudCover(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Doji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Doji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.DojiStar(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.DragonflyDoji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Engulfing(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.EveningDojiStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.EveningStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.GapSideBySideWhite(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.GravestoneDoji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Hammer(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hammer"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HangingMan(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Harami(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Harami"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HaramiCross(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HighWaveCandle(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Hikkake(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HikkakeModified(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HomingPigeon(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.IdenticalThreeCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.InNeck(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InNeck"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.InvertedHammer(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Kicking(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Kicking"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.KickingByLength(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.LadderBottom(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.LongLeggedDoji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.LongLineCandle(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Marubozu(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MatchingLow(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MatHold(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatHold"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MorningDojiStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MorningStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.OnNeck(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Piercing(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Piercing"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.RickshawMan(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.RiseFallThreeMethods(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.SeparatingLines(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ShootingStar(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ShortLineCandle(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.SpinningTop(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.StalledPattern(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.StickSandwich(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Takuri(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Takuri"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.TasukiGap(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Thrusting(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Tristar(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Tristar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.UniqueThreeRiver(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.UpsideGapTwoCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.UpDownGapThreeMethods(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions">
            <summary>
            Provides helpers for defining universes based on the daily dollar volume
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.#ctor(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions"/> class
            </summary>
            <param name="algorithm">The algorithm instance, used for obtaining the default <see cref="T:QuantConnect.Data.UniverseSelection.UniverseSettings"/></param>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Top(System.Int32,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains the top count of stocks
            by daily dollar volume
            </summary>
            <param name="count">The number of stock to select</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the top count of stocks by dollar volume</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Bottom(System.Int32,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains the bottom count of stocks
            by daily dollar volume
            </summary>
            <param name="count">The number of stock to select</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the bottom count of stocks by dollar volume</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Percentile(System.Double,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains stocks in the specified
            dollar volume percentile
            </summary>
            <param name="percentile">The desired dollar volume percentile (0 to 100 inclusive)</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the bottom count of stocks by dollar volume</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Percentile(System.Double,System.Double,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains stocks in the specified dollar volume percentile range,
            that is, this universe will produce stocks with dollar volumes between the lower percentile bound
            and the upper percentile bound
            </summary>
            <param name="lowerPercentile">The desired lower dollar volume  percentile bound (0 to 100 inclusive)</param>
            <param name="upperPercentile">The desired upper dollar volume  percentile bound (0 to 100 inclusive)</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the bottom count of stocks by dollar volume</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.QCAlgorithm">
            <summary>
            QC Algorithm Base Class - Handle the basic requirements of a trading algorithm, 
            allowing user to focus on event methods. The QCAlgorithm class implements Portfolio, 
            Securities, Transactions and Data Subscription Management.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.#ctor">
            <summary>
            QCAlgorithm Base Class Constructor - Initialize the underlying QCAlgorithm components.
            QCAlgorithm manages the transactions, portfolio, charting and security subscriptions for the users algorithms.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Securities">
            <summary>
            Security collection is an array of the security objects such as Equities and FOREX. Securities data 
            manages the properties of tradeable assets such as price, open and close time and holdings information.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Portfolio">
            <summary>
            Portfolio object provieds easy access to the underlying security-holding properties; summed together in a way to make them useful.
            This saves the user time by providing common portfolio requests in a single 
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.SubscriptionManager">
            <summary>
            Generic Data Manager - Required for compiling all data feeds in order, and passing them into algorithm event methods.
            The subscription manager contains a list of the data feed's we're subscribed to and properties of each data feed.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.BrokerageModel">
            <summary>
            Gets the brokerage model - used to model interactions with specific brokerages.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.BrokerageMessageHandler">
            <summary>
            Gets the brokerage message handler used to decide what to do
            with each message sent from the brokerage
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Notify">
            <summary>
            Notification Manager for Sending Live Runtime Notifications to users about important events.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Schedule">
            <summary>
            Gets schedule manager for adding/removing scheduled events
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Status">
            <summary>
            Gets or sets the current status of the algorithm
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer">
            <summary>
            Gets an instance that is to be used to initialize newly created securities.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TradeBuilder">
            <summary>
            Gets the Trade Builder to generate trades from executions
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.CandlestickPatterns">
            <summary>
            Gets an instance to access the candlestick pattern helper methods
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.DateRules">
            <summary>
            Gets the date rules helper object to make specifying dates for events easier
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TimeRules">
            <summary>
            Gets the time rules helper object to make specifying times for events easier
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Name">
            <summary>
            Public name for the algorithm as automatically generated by the IDE. Intended for helping distinguish logs by noting 
            the algorithm-id.
            </summary>
            <seealso cref="P:QuantConnect.Algorithm.QCAlgorithm.AlgorithmId"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Time">
            <summary>
            Read-only value for current time frontier of the algorithm in terms of the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.TimeZone"/>
            </summary>
            <remarks>During backtesting this is primarily sourced from the data feed. During live trading the time is updated from the system clock.</remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.UtcTime">
            <summary>
            Current date/time in UTC.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TimeZone">
            <summary>
            Gets the time zone used for the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Time"/> property. The default value
            is <see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.StartDate">
            <summary>
            Value of the user set start-date from the backtest. 
            </summary>
            <remarks>This property is set with SetStartDate() and defaults to the earliest QuantConnect data available - Jan 1st 1998. It is ignored during live trading </remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.EndDate">
            <summary>
            Value of the user set start-date from the backtest. Controls the period of the backtest.
            </summary>
            <remarks> This property is set with SetEndDate() and defaults to today. It is ignored during live trading.</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.AlgorithmId">
            <summary>
            Algorithm Id for this backtest or live algorithm. 
            </summary>
            <remarks>A unique identifier for </remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.RunMode">
            <summary>
            Control the server setup run style for the backtest: Automatic, Parallel or Series. 
            </summary>
            <remark>
                Series mode runs all days through one computer, allowing memory of the previous days. 
                Parallel mode runs all days separately which maximises speed but gives no memory of a previous day trading.
            </remark>
            <obsolete>The RunMode enum propert is now obsolete. All algorithms will default to RunMode.Series for series backtests.</obsolete>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.LiveMode">
            <summary>
            Boolean property indicating the algorithm is currently running in live mode. 
            </summary>
            <remarks>Intended for use where certain behaviors will be enabled while the algorithm is trading live: such as notification emails, or displaying runtime statistics.</remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.DebugMessages">
            <summary>
            Storage for debugging messages before the event handler has passed control back to the Lean Engine.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.LogMessages">
            <summary>
            Storage for log messages before the event handlers have passed control back to the Lean Engine.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.RunTimeError">
            <summary>
            Gets the run time error from the algorithm, or null if none was encountered.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.ErrorMessages">
            <summary>
            List of error messages generated by the user's code calling the "Error" function.
            </summary>
            <remarks>This method is best used within a try-catch bracket to handle any runtime errors from a user algorithm.</remarks>
            <see cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Initialize">
            <summary>
            Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PostInitialize">
            <summary>
            Called by setup handlers after Initialize and allows the algorithm a chance to organize
            the data gather in the Initialize method
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetParameter(System.String)">
            <summary>
            Gets the parameter with the specified name. If a parameter
            with the specified name does not exist, null is returned
            </summary>
            <param name="name">The name of the parameter to get</param>
            <returns>The value of the specified parameter, or null if not found</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the parameters from the dictionary
            </summary>
            <param name="parameters">Dictionary containing the parameter names to values</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetSecurityInitializer(QuantConnect.Securities.ISecurityInitializer)">
            <summary>
            Sets the security initializer, used to initialize/configure securities after creation
            </summary>
            <param name="securityInitializer">The security initializer</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetSecurityInitializer(System.Action{QuantConnect.Securities.Security})">
            <summary>
            Sets the security initializer function, used to initialize/configure securities after creation
            </summary>
            <param name="securityInitializer">The security initializer function</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnData(QuantConnect.Data.Slice)">
            <summary>
            Event - v3.0 DATA EVENT HANDLER: (Pattern) Basic template for user to override for receiving all subscription data in a single event
            </summary>
            <code>
            TradeBars bars = slice.Bars;
            Ticks ticks = slice.Ticks;
            TradeBar spy = slice["SPY"];
            List{Tick} aaplTicks = slice["AAPL"]
            Quandl oil = slice["OIL"]
            dynamic anySymbol = slice[symbol];
            DataDictionary{Quandl} allQuandlData = slice.Get{Quand}
            Quandl oil = slice.Get{Quandl}("OIL")
            </code>
            <param name="slice">The current slice of data keyed by symbol string</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="changes"></param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnMarginCall(System.Collections.Generic.List{QuantConnect.Orders.SubmitOrderRequest})">
            <summary>
            Margin call event handler. This method is called right before the margin call orders are placed in the market.
            </summary>
            <param name="requests">The orders to be executed to bring this algorithm within margin limits</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnMarginCallWarning">
            <summary>
            Margin call warning event handler. This method is called when Portfolio.MarginRemaining is under 5% of your Portfolio.TotalPortfolioValue
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay">
            <summary>
            End of a trading day event handler. This method is called at the end of the algorithm day (or multiple times if trading multiple assets).
            </summary>
            <remarks>Method is called 10 minutes before closing to allow user to close out position.</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay(System.String)">
            <summary>
            End of a trading day event handler. This method is called at the end of the algorithm day (or multiple times if trading multiple assets).
            </summary>
            <remarks>
            This method is left for backwards compatibility and is invoked via <see cref="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay(QuantConnect.Symbol)"/>, if that method is
            override then this method will not be called without a called to base.OnEndOfDay(string)
            </remarks>
            <param name="symbol">Asset symbol for this end of day event. Forex and equities have different closing hours.</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay(QuantConnect.Symbol)">
            <summary>
            End of a trading day event handler. This method is called at the end of the algorithm day (or multiple times if trading multiple assets).
            </summary>
            <param name="symbol">Asset symbol for this end of day event. Forex and equities have different closing hours.</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfAlgorithm">
            <summary>
            End of algorithm run event handler. This method is called at the end of a backtest or live trading operation. Intended for closing out logs.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)">
            <summary>
            Order fill event handler. On an order fill update the resulting information is passed to this method.
            </summary>
            <param name="orderEvent">Order event details containing details of the evemts</param>
            <remarks>This method can be called asynchronously and so should only be used by seasoned C# experts. Ensure you use proper locks on thread-unsafe objects</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnBrokerageMessage(QuantConnect.Brokerages.BrokerageMessageEvent)">
            <summary>
            Brokerage message event handler. This method is called for all types of brokerage messages.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnBrokerageDisconnect">
            <summary>
            Brokerage disconnected event handler. This method is called when the brokerage connection is lost.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnBrokerageReconnect">
            <summary>
            Brokerage reconnected event handler. This method is called when the brokerage connection is restored after a disconnection.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetDateTime(System.DateTime)">
            <summary>
            Update the internal algorithm time frontier.
            </summary>
            <remarks>For internal use only to advance time.</remarks>
            <param name="frontier">Current datetime.</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetTimeZone(System.String)">
            <summary>
            Sets the time zone of the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Time"/> property in the algorithm
            </summary>
            <param name="timeZone">The desired time zone</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetTimeZone(NodaTime.DateTimeZone)">
            <summary>
            Sets the time zone of the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Time"/> property in the algorithm
            </summary>
            <param name="timeZone">The desired time zone</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRunMode(QuantConnect.RunMode)">
            <summary>
            Set the RunMode for the Servers. If you are running an overnight algorithm, you must select series.
            Automatic will analyse the selected data, and if you selected only minute data we'll select series for you.
            </summary>
            <obsolete>This method is now obsolete and has no replacement. All algorithms now run in Series mode.</obsolete>
            <param name="mode">Enum RunMode with options Series, Parallel or Automatic. Automatic scans your requested symbols and resolutions and makes a decision on the fastest analysis</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName,QuantConnect.AccountType)">
            <summary>
            Sets the brokerage to emulate in backtesting or paper trading.
            This can be used for brokerages that have been implemented in LEAN
            </summary>
            <param name="brokerage">The brokerage to emulate</param>
            <param name="accountType">The account type (Cash or Margin)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)">
            <summary>
            Sets the brokerage to emulate in backtesting or paper trading.
            This can be used to set a custom brokerage model.
            </summary>
            <param name="model">The brokerage model to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBrokerageMessageHandler(QuantConnect.Brokerages.IBrokerageMessageHandler)">
            <summary>
            Sets the implementation used to handle messages from the brokerage.
            The default implementation will forward messages to debug or error
            and when a <see cref="F:QuantConnect.Brokerages.BrokerageMessageType.Error"/> occurs, the algorithm
            is stopped.
            </summary>
            <param name="handler">The message handler to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(QuantConnect.SecurityType,System.String)">
            <summary>
            Sets the benchmark used for computing statistics of the algorithm to the specified symbol
            </summary>
            <param name="symbol">symbol to use as the benchmark</param>
            <param name="securityType">Is the symbol an equity, forex, base, etc. Default SecurityType.Equity</param>
            <remarks>
            Must use symbol that is available to the trade engine in your data store(not strictly enforced)
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.String)">
            <summary>
            Sets the benchmark used for computing statistics of the algorithm to the specified symbol, defaulting to SecurityType.Equity
            if the symbol doesn't exist in the algorithm
            </summary>
            <param name="symbol">symbol to use as the benchmark</param>
            <remarks>
            Overload to accept symbol without passing SecurityType. If symbol is in portfolio it will use that SecurityType, otherwise will default to SecurityType.Equity
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(QuantConnect.Symbol)">
            <summary>
            Sets the benchmark used for computing statistics of the algorithm to the specified symbol
            </summary>
            <param name="symbol">symbol to use as the benchmark</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func{System.DateTime,System.Decimal})">
            <summary>
            Sets the specified function as the benchmark, this function provides the value of
            the benchmark at each date/time requested
            </summary>
            <param name="benchmark">The benchmark producing function</param>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Benchmark">
            <summary>
            Benchmark
            </summary>
            <remarks>Use Benchmark to override default symbol based benchmark, and create your own benchmark. For example a custom moving average benchmark </remarks>
            
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Double)">
            <summary>
            Set initial cash for the strategy while backtesting. During live mode this value is ignored 
            and replaced with the actual cash of your brokerage account.
            </summary>
            <param name="startingCash">Starting cash for the strategy backtest</param>
            <remarks>Alias of SetCash(decimal)</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Int32)">
            <summary>
            Set initial cash for the strategy while backtesting. During live mode this value is ignored 
            and replaced with the actual cash of your brokerage account.
            </summary>
            <param name="startingCash">Starting cash for the strategy backtest</param>
            <remarks>Alias of SetCash(decimal)</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Decimal)">
            <summary>
            Set initial cash for the strategy while backtesting. During live mode this value is ignored 
            and replaced with the actual cash of your brokerage account.
            </summary>
            <param name="startingCash">Starting cash for the strategy backtest</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.String,System.Decimal,System.Decimal)">
            <summary>
            Set the cash for the specified symbol
            </summary>
            <param name="symbol">The cash symbol to set</param>
            <param name="startingCash">Decimal cash value of portfolio</param>
            <param name="conversionRate">The current conversion rate for the</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the start date for backtest.
            </summary>
            <param name="day">Int starting date 1-30</param>
            <param name="month">Int month starting date</param>
            <param name="year">Int year starting date</param>
            <remarks> 
                Wrapper for SetStartDate(DateTime). 
                Must be less than end date. 
                Ignored in live trading mode.
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the end date for a backtest run 
            </summary>
            <param name="day">Int end date 1-30</param>
            <param name="month">Int month end date</param>
            <param name="year">Int year end date</param>
            <remarks>Wrapper for SetEndDate(datetime).</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetAlgorithmId(System.String)">
            <summary>
            Set the algorithm id (backtestId or live deployId for the algorithmm).
            </summary>
            <param name="algorithmId">String Algorithm Id</param>
            <remarks>Intended for internal QC Lean Engine use only as a setter for AlgorihthmId</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)">
            <summary>
            Set the start date for the backtest 
            </summary>
            <param name="start">Datetime Start date for backtest</param>
            <remarks>Must be less than end date and within data available</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)">
            <summary>
            Set the end date for a backtest.
            </summary>
            <param name="end">Datetime value for end date</param>
            <remarks>Must be greater than the start date</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetLocked">
            <summary>
            Lock the algorithm initialization to avoid user modifiying cash and data stream subscriptions
            </summary>
            <remarks>Intended for Internal QC Lean Engine use only to prevent accidental manipulation of important properties</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetLocked">
            <summary>
            Gets whether or not this algorithm has been locked and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetLiveMode(System.Boolean)">
            <summary>
            Set live mode state of the algorithm run: Public setter for the algorithm property LiveMode.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.Boolean,System.Boolean)">
            <summary>
            Add specified data to our data subscriptions. QuantConnect will funnel this data to the handle data routine.
            </summary>
            <param name="securityType">MarketType Type: Equity, Commodity, Future or FOREX</param>
            <param name="symbol">Symbol Reference for the MarketType</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="extendedMarketHours">Show the after market data as well</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Add specified data to required list. QC will funnel this data to the handle data routine.
            </summary>
            <param name="securityType">MarketType Type: Equity, Commodity, Future or FOREX</param>
            <param name="symbol">Symbol Reference for the MarketType</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <param name="extendedMarketHours">Extended market hours</param>
            <remarks> AddSecurity(SecurityType securityType, Symbol symbol, Resolution resolution, bool fillDataForward, decimal leverage, bool extendedMarketHours)</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Set a required SecurityType-symbol and resolution for algorithm
            </summary>
            <param name="securityType">SecurityType Enum: Equity, Commodity, FOREX or Future</param>
            <param name="symbol">Symbol Representation of the MarketType, e.g. AAPL</param>
            <param name="resolution">Resolution of the MarketType required: MarketData, Second or Minute</param>
            <param name="market">The market the requested security belongs to, such as 'usa' or 'fxcm'</param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice.</param>
            <param name="leverage">leverage for this security</param>
            <param name="extendedMarketHours">ExtendedMarketHours send in data from 4am - 8pm, not used for FOREX</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddEquity(System.String,QuantConnect.Resolution,System.String,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Equity.Equity"/> security to the algorithm
            </summary>
            <param name="ticker">The equity ticker symbol</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The equity's market, <seealso cref="T:QuantConnect.Market"/>. Default is <see cref="F:QuantConnect.Market.USA"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <param name="extendedMarketHours">True to send data during pre and post market sessions. Default is <value>false</value></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Equity.Equity"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddForex(System.String,QuantConnect.Resolution,System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Forex.Forex"/> security to the algorithm
            </summary>
            <param name="ticker">The currency pair</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The foreign exchange trading market, <seealso cref="T:QuantConnect.Market"/>. Default is <see cref="F:QuantConnect.Market.FXCM"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Forex.Forex"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddCfd(System.String,QuantConnect.Resolution,System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Cfd.Cfd"/> security to the algorithm
            </summary>
            <param name="ticker">The currency pair</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The cfd trading market, <seealso cref="T:QuantConnect.Market"/>. Default is <see cref="F:QuantConnect.Market.FXCM"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Cfd.Cfd"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RemoveSecurity(QuantConnect.Symbol)">
            <summary>
            Removes the security with the specified symbol. This will cancel all
            open orders and then liquidate any existing holdings
            </summary>
            <param name="symbol">The symbol of the security to be removed</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(System.String,QuantConnect.Resolution)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time)
            </summary>
            <param name="symbol">Key/Symbol for data</param>
            <param name="resolution">Resolution of the data</param>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(System.String,QuantConnect.Resolution,System.Boolean,System.Decimal)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time)
            </summary>
            <param name="symbol">Key/Symbol for data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(System.String,QuantConnect.Resolution,NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            </summary>
            <param name="symbol">Key/Symbol for data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)">
            <summary>
            Send a debug message to the web console:
            </summary>
            <param name="message">Message to send to debug console</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)">
            <summary>
            Added another method for logging if user guessed.
            </summary>
            <param name="message">String message to log.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)">
            <summary>
            Send a string error message to the Console.
            </summary>
            <param name="message">Message to display in errors grid</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Exception)">
            <summary>
            Send a string error message to the Console.
            </summary>
            <param name="error">Exception object captured from a try catch loop</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Quit(System.String)">
            <summary>
            Terminate the algorithm after processing the current event handler.
            </summary>
            <param name="message">Exit message to display on quitting</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetQuit(System.Boolean)">
            <summary>
            Set the Quit flag property of the algorithm.
            </summary>
            <remarks>Intended for internal use by the QuantConnect Lean Engine only.</remarks>
            <param name="quit">Boolean quit state</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Quit(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Symbol(System.String)">
            <summary>
            Converts the string 'ticker' symbol into a full <see cref="M:QuantConnect.Algorithm.QCAlgorithm.Symbol(System.String)"/> object
            This requires that the string 'ticker' has been added to the algorithm
            </summary>
            <param name="ticker">The ticker symbol. This should be the ticker symbol
            as it was added to the algorithm</param>
            <returns>The symbol object mapped to the specified ticker</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Security"/> to the algorithm
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.HistoryProvider">
            <summary>
            Gets or sets the history provider for the algorithm
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.IsWarmingUp">
            <summary>
            Gets whether or not this algorithm is still warming up
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)">
            <summary>
            Sets the warm up period to the specified value
            </summary>
            <param name="timeSpan">The amount of time to warm up, this does not take into account market hours/weekends</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan)">
            <summary>
            Sets the warm up period to the specified value
            </summary>
            <param name="timeSpan">The amount of time to warm up, this does not take into account market hours/weekends</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.Int32)">
            <summary>
            Sets the warm up period by resolving a start date that would send that amount of data into
            the algorithm. The highest (smallest) resolution in the securities collection will be used.
            For example, if an algorithm has minute and daily data and 200 bars are requested, that would
            use 200 minute bars.
            </summary>
            <param name="barCount">The number of data points requested for warm up</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.Int32)">
            <summary>
            Sets the warm up period by resolving a start date that would send that amount of data into
            the algorithm. The highest (smallest) resolution in the securities collection will be used.
            For example, if an algorithm has minute and daily data and 200 bars are requested, that would
            use 200 minute bars.
            </summary>
            <param name="barCount">The number of data points requested for warm up</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp">
            <summary>
            Sets <see cref="P:QuantConnect.Interfaces.IAlgorithm.IsWarmingUp"/> to false to indicate this algorithm has finished its warm up
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests">
            <summary>
            Gets the history requests required for provide warm up data for the algorithm
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Get the history for all configured securities over the requested span.
            This will use the resolution and other subscription settings for each security.
            The symbols must exist in the Securities collection.
            </summary>
            <param name="span">The span over which to request data. This is a calendar span, so take into consideration weekends and such</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing data over the most recent span for all configured securities</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Get the history for all configured securities over the requested span.
            This will use the resolution and other subscription settings for each security.
            The symbols must exist in the Securities collection.
            </summary>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing data over the most recent span for all configured securities</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for all symbols of the requested type over the requested span.
            The symbol's configured values for resolution and fill forward behavior will be used
            The symbols must exist in the Securities collection.
            </summary>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols over the requested span.
            The symbols must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbols</typeparam>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols. The exact number of bars will be returned for
            each symbol. This may result in some data start earlier/later than others due to when various
            exchanges are open. The symbols must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbols</typeparam>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols between the specified dates. The symbols must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbols</typeparam>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(QuantConnect.Symbol,System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol over the request span. The symbol must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbol</typeparam>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol. The exact number of bars will be returned. 
            The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol. The exact number of bars will be returned. 
            The symbol must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbol</typeparam>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(QuantConnect.Symbol,System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol between the specified dates. The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol,System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol over the request span. The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol,System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol over the request span. The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols over the requested span.
            The symbol's configured values for resolution and fill forward behavior will be used
            The symbols must exist in the Securities collection.
            </summary>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols. The exact number of bars will be returned for
            each symbol. This may result in some data start earlier/later than others due to when various
            exchanges are open. The symbols must exist in the Securities collection.
            </summary>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Gets the historical data for the specified symbols between the specified dates. The symbols must exist in the Securities collection.
            </summary>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <param name="fillForward">True to fill forward missing data, false otherwise</param>
            <param name="extendedMarket">True to include extended market hours data, false otherwise</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetStartTimeAlgoTz(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the start time required for the specified bar count in terms of the algorithm's time zone
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Data.HistoryRequest)">
            <summary>
            Executes the specified history request
            </summary>
            <param name="request">the history request to execute</param>
            <returns>An enumerable of slice satisfying the specified history request</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Data.HistoryRequest})">
            <summary>
            Executes the specified history requests
            </summary>
            <param name="requests">the history requests to execute</param>
            <returns>An enumerable of slice satisfying the specified history request</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CreateDateRangeHistoryRequests(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Helper method to create history requests from a date range
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CreateBarCountHistoryRequests(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Helper methods to create a history request for the specified symbols and bar count
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Transactions">
            <summary>
            Transaction Manager - Process transaction fills and order management.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Int32)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">int Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Double)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">double Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Int32)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">decimal Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Single)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">float Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Int32)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">int Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Double)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">String symbol to sell</param>
            <param name="quantity">Quantity to order</param>
            <returns>int Order Id.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Single)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">String symbol</param>
            <param name="quantity">Quantity to sell</param>
            <returns>int order id</returns>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">String symbol to sell</param>
            <param name="quantity">Quantity to sell</param>
            <returns>Int Order Id.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Double)">
            <summary>
            Issue an order/trade for asset: Alias wrapper for Order(string, int);
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Issue an order/trade for asset: Alias wrapper for Order(string, int);
            </summary>
            <remarks></remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)">
            <summary>
            Wrapper for market order method: submit a new order for quantity of symbol using type order.
            </summary>
            <param name="symbol">Symbol of the MarketType Required.</param>
            <param name="quantity">Number of shares to request.</param>
            <param name="asynchronous">Send the order asynchrously (false). Otherwise we'll block until it fills</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)">
            <summary>
            Market order implementation: Send a market order and wait for it to be filled.
            </summary>
            <param name="symbol">Symbol of the MarketType Required.</param>
            <param name="quantity">Number of shares to request.</param>
            <param name="asynchronous">Send the order asynchrously (false). Otherwise we'll block until it fills</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>int Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol,System.Int32,System.String)">
            <summary>
            Market on open order implementation: Send a market order when the exchange opens
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol,System.Int32,System.String)">
            <summary>
            Market on close order implementation: Send a market order when the exchange closes
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol,System.Int32,System.Decimal,System.String)">
            <summary>
            Send a limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol,System.Int32,System.Decimal,System.String)">
            <summary>
            Create a stop market order and return the newly created order id; or negative if the order is invalid
            </summary>
            <param name="symbol">String symbol for the asset we're trading</param>
            <param name="quantity">Quantity to be traded</param>
            <param name="stopPrice">Price to fill the stop order</param>
            <param name="tag">Optional string data tag for the order</param>
            <returns>Int orderId for the new order.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol,System.Int32,System.Decimal,System.Decimal,System.String)">
            <summary>
            Send a stop limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="stopPrice">Stop price for this order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)">
            <summary>
            Perform preorder checks to ensure we have sufficient capital, 
            the market is open, and we haven't exceeded maximum realistic orders per day.
            </summary>
            <returns>OrderResponse. If no error, order request is submitted.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)">
            <summary>
            Perform preorder checks to ensure we have sufficient capital, 
            the market is open, and we haven't exceeded maximum realistic orders per day.
            </summary>
            <returns>OrderResponse. If no error, order request is submitted.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol)">
            <summary>
            Liquidate all holdings and cancel open orders. Called at the end of day for tick-strategies.
            </summary>
            <param name="symbolToLiquidate">Symbols we wish to liquidate</param>
            <returns>Array of order ids for liquidated symbols</returns>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(System.Int32)">
            <summary>
            Maximum number of orders for the algorithm
            </summary>
            <param name="max"></param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Double,System.Boolean)">
            <summary>
            Alias for SetHoldings to avoid the M-decimal errors.
            </summary>
            <param name="symbol">string symbol we wish to hold</param>
            <param name="percentage">double percentage of holdings desired</param>
            <param name="liquidateExistingHoldings">liquidate existing holdings if neccessary to hold this stock</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Single,System.Boolean,System.String)">
            <summary>
            Alias for SetHoldings to avoid the M-decimal errors.
            </summary>
            <param name="symbol">string symbol we wish to hold</param>
            <param name="percentage">float percentage of holdings desired</param>
            <param name="liquidateExistingHoldings">bool liquidate existing holdings if neccessary to hold this stock</param>
            <param name="tag">Tag the order with a short string.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)">
            <summary>
            Alias for SetHoldings to avoid the M-decimal errors.
            </summary>
            <param name="symbol">string symbol we wish to hold</param>
            <param name="percentage">float percentage of holdings desired</param>
            <param name="liquidateExistingHoldings">bool liquidate existing holdings if neccessary to hold this stock</param>
            <param name="tag">Tag the order with a short string.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)">
            <summary>
            Automatically place an order which will set the holdings to between 100% or -100% of *PORTFOLIO VALUE*.
            E.g. SetHoldings("AAPL", 0.1); SetHoldings("IBM", -0.2); -> Sets portfolio as long 10% APPL and short 20% IBM
            E.g. SetHoldings("AAPL", 2); -> Sets apple to 2x leveraged with all our cash.
            </summary>
            <param name="symbol">Symbol indexer</param>
            <param name="percentage">decimal fraction of portfolio to set stock</param>
            <param name="liquidateExistingHoldings">bool flag to clean all existing holdings before setting new faction.</param>
            <param name="tag">Tag the order with a short string.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol,System.Double)">
            <summary>
            Calculate the order quantity to achieve target-percent holdings.
            </summary>
            <param name="symbol">Security object we're asking for</param>
            <param name="target">Target percentag holdings</param>
            <returns>Order quantity to achieve this percentage</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Calculate the order quantity to achieve target-percent holdings.
            </summary>
            <param name="symbol">Security object we're asking for</param>
            <param name="target">Target percentag holdings, this is an unlevered value, so 
            if you have 2x leverage and request 100% holdings, it will utilize half of the 
            available margin</param>
            <returns>Order quantity to achieve this percentage</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Int32,QuantConnect.Orders.OrderType,System.Boolean,System.String)">
            <summary>
            Obsolete implementation of Order method accepting a OrderType. This was deprecated since it 
            was impossible to generate other orders via this method. Any calls to this method will always default to a Market Order.
            </summary>
            <param name="symbol">Symbol we want to purchase</param>
            <param name="quantity">Quantity to buy, + is long, - short.</param>
            <param name="type">Order Type</param>
            <param name="asynchronous">Don't wait for the response, just submit order and move on.</param>
            <param name="tag">Custom data for this order</param>
            <returns>Integer Order ID.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Decimal,QuantConnect.Orders.OrderType)">
            <summary>
            Obsolete method for placing orders. 
            </summary>
            <param name="symbol"></param>
            <param name="quantity"></param>
            <param name="type"></param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Int32,QuantConnect.Orders.OrderType)">
            <summary>
            Obsolete method for placing orders.
            </summary>
            <param name="symbol"></param>
            <param name="quantity"></param>
            <param name="type"></param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol,System.Func{QuantConnect.Data.BaseData,System.Decimal},System.String)">
            <summary>
            Creates a new Identity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new Identity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol,QuantConnect.Resolution,System.Func{QuantConnect.Data.BaseData,System.Decimal},System.String)">
            <summary>
            Creates a new Identity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new Identity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol,System.TimeSpan,System.Func{QuantConnect.Data.BaseData,System.Decimal},System.String)">
            <summary>
            Creates a new Identity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new Identity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ICHIMOKU(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new IchimokuKinkoHyo indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose ICHIMOKU we want</param>
            <param name="tenkanPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="kijunPeriod">The period to calculate the Kijun-sen period</param>
            <param name="senkouAPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="senkouBPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="senkouADelayPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="senkouBDelayPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="resolution">The resolution</param>
            <returns>A new IchimokuKinkoHyo indicator with the specified periods and delays</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ATR(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AverageTrueRange indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose ATR we want</param>
            <param name="period">The smoothing period used to smooth the computed TrueRange values</param>
            <param name="type">The type of smoothing to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>A new AverageTrueRange indicator with the specified smoothing type and period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.EMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates an ExponentialMovingAverage indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose EMA we want</param>
            <param name="period">The period of the EMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The ExponentialMovingAverage for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates an SimpleMovingAverage indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose SMA we want</param>
            <param name="period">The period of the SMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The SimpleMovingAverage for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MACD(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a MACD indicator for the symbol. The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose MACD we want</param>
            <param name="fastPeriod">The period for the fast moving average</param>
            <param name="slowPeriod">The period for the slow moving average</param>
            <param name="signalPeriod">The period for the signal moving average</param>
            <param name="type">The type of moving average to use for the MACD</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The moving average convergence divergence between the fast and slow averages</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MAX(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new Maximum indicator to compute the maximum value
            </summary>
            <param name="symbol">The symbol whose max we want</param>
            <param name="period">The look back period over which to compute the max value</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null and the symbol is of type TradeBar defaults to the High property, 
            otherwise it defaults to Value property of BaseData (x => x.Value)</param>
            <returns>A Maximum indicator that compute the max value and the periods since the max value</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MIN(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new Minimum indicator to compute the minimum value
            </summary>
            <param name="symbol">The symbol whose min we want</param>
            <param name="period">The look back period over which to compute the min value</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null and the symbol is of type TradeBar defaults to the Low property, 
            otherwise it defaults to Value property of BaseData (x => x.Value)</param>
            <returns>A Minimum indicator that compute the in value and the periods since the min value</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AROON(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AroonOscillator indicator which will compute the AroonUp and AroonDown (as well as the delta)
            </summary>
            <param name="symbol">The symbol whose Aroon we seek</param>
            <param name="period">The look back period for computing number of periods since maximum and minimum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>An AroonOscillator configured with the specied periods</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AROON(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AroonOscillator indicator which will compute the AroonUp and AroonDown (as well as the delta)
            </summary>
            <param name="symbol">The symbol whose Aroon we seek</param>
            <param name="upPeriod">The look back period for computing number of periods since maximum</param>
            <param name="downPeriod">The look back period for computing number of periods since minimum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>An AroonOscillator configured with the specified periods</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MOM(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new Momentum indicator. This will compute the absolute n-period change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose momentum we want</param>
            <param name="period">The period over which to compute the momentum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The momentum indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MOMP(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new MomentumPercent indicator. This will compute the n-period percent change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose momentum we want</param>
            <param name="period">The period over which to compute the momentum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The momentum indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RSI(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new RelativeStrengthIndex indicator. This will produce an oscillator that ranges from 0 to 100 based
            on the ratio of average gains to average losses over the specified period.
            </summary>
            <param name="symbol">The symbol whose RSI we want</param>
            <param name="period">The period over which to compute the RSI</param>
            <param name="movingAverageType">The type of moving average to use in computing the average gain/loss values</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RelativeStrengthIndex indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CCI(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new CommodityChannelIndex indicator. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose CCI we want</param>
            <param name="period">The period over which to compute the CCI</param>
            <param name="movingAverageType">The type of moving average to use in computing the typical price averge</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The CommodityChannelIndex indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MFI(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new MoneyFlowIndex indicator. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose MFI we want</param>
            <param name="period">The period over which to compute the MFI</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MoneyFlowIndex indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.STD(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new StandardDeviation indicator. This will return the population standard deviation of samples over the specified period.
            </summary>
            <param name="symbol">The symbol whose STD we want</param>
            <param name="period">The period over which to compute the STD</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The StandardDeviation indicator for the requested symbol over the speified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.BB(QuantConnect.Symbol,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new BollingerBands indicator which will compute the MiddleBand, UpperBand, LowerBand, and StandardDeviation
            </summary>
            <param name="symbol">The symbol whose BollingerBands we seek</param>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="k">The number of standard deviations specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>A BollingerBands configured with the specied period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ROC(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new RateOfChange indicator. This will compute the n-period rate of change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose RateOfChange we want</param>
            <param name="period">The period over which to compute the RateOfChange</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RateOfChange indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ROCP(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new RateOfChangePercent indicator. This will compute the n-period percentage rate of change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose RateOfChangePercent we want</param>
            <param name="period">The period over which to compute the RateOfChangePercent</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RateOfChangePercent indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WILR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Williams %R indicator. This will compute the percentage change of
            the current closing price in relation to the high and low of the past N periods.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Williams %R we want</param>
            <param name="period">The period over which to compute the Williams %R</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The rateofchangepercent indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LWMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new LinearWeightedMovingAverage indicator.  This indicator will linearly distribute
            the weights across the periods.  
            </summary>
            <param name="symbol">The symbol whose LWMA we want</param>
            <param name="period">The period over which to compute the LWMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OBV(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new On Balance Volume indicator. This will compute the cumulative total volume
            based on whether the close price being higher or lower than the previous period.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose On Balance Volume we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The On Balance Volume indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADX(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Average Directional Index indicator. 
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Average Directional Index we seek</param>
            <param name="resolution">The resolution.</param> 
            <param name="period">The period over which to compute the Average Directional Index</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Average Directional Index indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.KCH(QuantConnect.Symbol,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Keltner Channels indicator. 
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Keltner Channel we seek</param>
            <param name="period">The period over which to compute the Keltner Channels</param>
            <param name="k">The number of multiples of the <see cref="T:QuantConnect.Indicators.AverageTrueRange"/> from the middle band of the Keltner Channels</param>
            <param name="movingAverageType">Specifies the type of moving average to be used as the middle line of the Keltner Channel</param>
            <param name="resolution">The resolution.</param> 
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Keltner Channel indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DCH(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Donchian Channel indicator which will compute the Upper Band and Lower Band.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Donchian Channel we seek.</param>
            <param name="upperPeriod">The period over which to compute the upper Donchian Channel.</param>
            <param name="lowerPeriod">The period over which to compute the lower Donchian Channel.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Donchian Channel indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DCH(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Overload shorthand to create a new symmetric Donchian Channel indicator which
            has the upper and lower channels set to the same period length.
            </summary>
            <param name="symbol">The symbol whose Donchian Channel we seek.</param>
            <param name="period">The period over which to compute the Donchian Channel.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Donchian Channel indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.STO(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new Stochastic indicator.
            </summary>
            <param name="symbol">The symbol whose stochastic we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="period">The period of the stochastic. Normally 14</param>
            <param name="kPeriod">The sum period of the stochastic. Normally 14</param>
            <param name="dPeriod">The sum period of the stochastic. Normally 3</param>
            <returns>Stochastic indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.STO(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Overload short hand to create a new Stochastic indicator; defaulting to the 3 period for dStoch
            </summary>
            <param name="symbol">The symbol whose stochastic we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="period">The period of the stochastic. Normally 14</param>
            <returns>Stochastic indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LOGR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new LogReturn indicator.
            </summary>
            <param name="symbol">The symbol whose log return we seek</param>
            <param name="period">The period of the log return.</param>
            <param name="resolution">The resolution.</param>
            <returns>log return indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LSMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates and registers a new Least Squares Moving Average instance.
            </summary>
            <param name="symbol">The symbol whose LSMA we seek.</param>
            <param name="period">The LSMA period. Normally 14.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar.</param>
            <returns>A LeastSquaredMovingAverage configured with the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PSAR(QuantConnect.Symbol,System.Decimal,System.Decimal,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Parabolic SAR indicator
            </summary>
            <param name="symbol">The symbol whose PSAR we seek</param>
            <param name="afStart">Acceleration factor start value. Normally 0.02</param>
            <param name="afIncrement">Acceleration factor increment value. Normally 0.02</param>
            <param name="afMax">Acceleration factor max value. Normally 0.2</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>A ParabolicStopAndReverse configured with the specified periods</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.BOP(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Balance Of Power indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Balance Of Power we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Balance Of Power indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.VAR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new Variance indicator. This will return the population variance of samples over the specified period.
            </summary>
            <param name="symbol">The symbol whose VAR we want</param>
            <param name="period">The period over which to compute the VAR</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Variance indicator for the requested symbol over the speified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AD(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AccumulationDistribution indicator.
            </summary>
            <param name="symbol">The symbol whose AD we want</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AccumulationDistribution indicator for the requested symbol over the speified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADOSC(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AccumulationDistributionOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose ADOSC we want</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AccumulationDistributionOscillator indicator for the requested symbol over the speified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TR(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new TrueRange indicator.
            </summary>
            <param name="symbol">The symbol whose TR we want</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The TrueRange indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CMO(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new ChandeMomentumOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose CMO we want</param>
            <param name="period">The period over which to compute the CMO</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The ChandeMomentumOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DEMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new DoubleExponentialMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose DEMA we want</param>
            <param name="period">The period over which to compute the DEMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The DoubleExponentialMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TEMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new TripleExponentialMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose TEMA we want</param>
            <param name="period">The period over which to compute the TEMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The TripleExponentialMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TRIMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new TriangularMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose TRIMA we want</param>
            <param name="period">The period over which to compute the TRIMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The TriangularMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ROCR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new RateOfChangeRatio indicator.
            </summary>
            <param name="symbol">The symbol whose ROCR we want</param>
            <param name="period">The period over which to compute the ROCR</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RateOfChangeRatio indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MAD(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new MeanAbsoluteDeviation indicator.
            </summary>
            <param name="symbol">The symbol whose MeanAbsoluteDeviation we want</param>
            <param name="period">The period over which to compute the MeanAbsoluteDeviation</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MeanAbsoluteDeviation indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MOMERSION(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new Momersion indicator.
            </summary>
            <param name="symbol">The symbol whose Momersion we want</param>
            <param name="minPeriod">The minimum period over which to compute the Momersion</param>
            <param name="fullPeriod">The full period over which to compute the Momersion</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Momersion indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SUM(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new Sum indicator.
            </summary>
            <param name="symbol">The symbol whose Sum we want</param>
            <param name="period">The period over which to compute the Sum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Sum indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.T3(QuantConnect.Symbol,System.Int32,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new T3MovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose T3 we want</param>
            <param name="period">The period over which to compute the T3</param>
            <param name="volumeFactor">The volume factor to be used for the T3 (value must be in the [0,1] range, defaults to 0.7)</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The T3MovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.NATR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new NormalizedAverageTrueRange indicator.
            </summary>
            <param name="symbol">The symbol whose NATR we want</param>
            <param name="period">The period over which to compute the NATR</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The NormalizedAverageTrueRange indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.HeikinAshi(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Heikin-Ashi indicator.
            </summary>
            <param name="symbol">The symbol whose Heikin-Ashi we want</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Heikin-Ashi indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADXR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AverageDirectionalMovementIndexRating indicator.
            </summary>
            <param name="symbol">The symbol whose ADXR we want</param>
            <param name="period">The period over which to compute the ADXR</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AverageDirectionalMovementIndexRating indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.KAMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new KaufmanAdaptiveMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose KAMA we want</param>
            <param name="period">The period over which to compute the KAMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The KaufmanAdaptiveMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MIDPOINT(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new MidPoint indicator.
            </summary>
            <param name="symbol">The symbol whose MIDPOINT we want</param>
            <param name="period">The period over which to compute the MIDPOINT</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MidPoint indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ULTOSC(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new UltimateOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose ULTOSC we want</param>
            <param name="period1">The first period over which to compute the ULTOSC</param>
            <param name="period2">The second period over which to compute the ULTOSC</param>
            <param name="period3">The third period over which to compute the ULTOSC</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The UltimateOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TRIX(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new Trix indicator.
            </summary>
            <param name="symbol">The symbol whose TRIX we want</param>
            <param name="period">The period over which to compute the TRIX</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Trix indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MIDPRICE(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new MidPrice indicator.
            </summary>
            <param name="symbol">The symbol whose MIDPRICE we want</param>
            <param name="period">The period over which to compute the MIDPRICE</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MidPrice indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.APO(QuantConnect.Symbol,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new AbsolutePriceOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose APO we want</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AbsolutePriceOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PPO(QuantConnect.Symbol,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates a new PercentagePriceOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose PPO we want</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The PercentagePriceOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.VWAP(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates an VolumeWeightedAveragePrice (VWAP) indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose VWAP we want</param>
            <param name="period">The period of the VWAP</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The VolumeWeightedAveragePrice for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates and registers a new consolidator to receive automatic updates at the specified resolution as well as configures
            the indicator to receive updates from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Nullable{System.TimeSpan},System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Creates and registers a new consolidator to receive automatic updates at the specified resolution as well as configures
            the indicator to receive updates from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Data.Consolidators.IDataConsolidator,System.Func{QuantConnect.Data.BaseData,System.Decimal})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="consolidator">The consolidator to receive raw subscription data</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.Nullable{QuantConnect.Resolution})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.BaseData,``0})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.Nullable{System.TimeSpan},System.Func{QuantConnect.Data.BaseData,``0})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},QuantConnect.Data.Consolidators.IDataConsolidator,System.Func{QuantConnect.Data.BaseData,``0})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="consolidator">The consolidator to receive raw subscription data</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ResolveConsolidator(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the default consolidator for the specified symbol and resolution
            </summary>
            <param name="symbol">The symbo whose data is to be consolidated</param>
            <param name="resolution">The resolution for the consolidator, if null, uses the resolution from subscription</param>
            <returns>The new default consolidator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ResolveConsolidator(QuantConnect.Symbol,System.Nullable{System.TimeSpan})">
            <summary>
            Gets the default consolidator for the specified symbol and resolution
            </summary>
            <param name="symbol">The symbo whose data is to be consolidated</param>
            <param name="timeSpan">The requested time span for the consolidator, if null, uses the resolution from subscription</param>
            <returns>The new default consolidator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetSubscription(QuantConnect.Symbol)">
            <summary>
            Gets the SubscriptionDataConfig for the specified symbol
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if no configuration is found for the requested symbol</exception>
            <param name="symbol">The symbol to retrieve configuration for</param>
            <returns>The SubscriptionDataConfig for the specified symbol</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CreateIndicatorName(QuantConnect.Symbol,System.String,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new name for an indicator created with the convenience functions (SMA, EMA, ect...)
            </summary>
            <param name="symbol">The symbol this indicator is registered to</param>
            <param name="type">The indicator type, for example, 'SMA5'</param>
            <param name="resolution">The resolution requested</param>
            <returns>A unique for the given parameters</returns>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.RuntimeStatistics">
            <summary>
            Access to the runtime statistics property. User provided statistics.
            </summary>
            <remarks> RuntimeStatistics are displayed in the head banner in live trading</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddChart(QuantConnect.Chart)">
            <summary>
            Add a Chart object to algorithm collection
            </summary>
            <param name="chart">Chart object to add to collection.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Decimal)">
            <summary>
            Plot a chart using string series name, with value.
            </summary>
            <param name="series">Name of the plot series</param>
            <param name="value">Value to plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Record(System.String,System.Int32)">
            <summary>
            Plot a chart using string series name, with int value. Alias of Plot();
            </summary>
            <remarks> Record(string series, int value)</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Record(System.String,System.Double)">
            <summary>
            Plot a chart using string series name, with double value. Alias of Plot();
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Record(System.String,System.Decimal)">
            <summary>
            Plot a chart using string series name, with decimal value. Alias of Plot();
            </summary>
            <param name="series"></param>
            <param name="value"></param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Double)">
            <summary>
            Plot a chart using string series name, with double value.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Int32)">
            <summary>
            Plot a chart using string series name, with int value.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Single)">
             <summary>
            Plot a chart using string series name, with float value.
             </summary>
             <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Double)">
            <summary>
            Plot a chart to string chart name, using string series name, with double value.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Int32)">
            <summary>
            Plot a chart to string chart name, using string series name, with int value
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Single)">
            <summary>
            Plot a chart to string chart name, using string series name, with float value
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)">
            <summary>
            Plot a value to a chart of string-chart name, with string series name, and decimal value. If chart does not exist, create it.
            </summary>
            <param name="chart">Chart name</param>
            <param name="series">Series name</param>
            <param name="value">Value of the point</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot``1(System.String,QuantConnect.Indicators.IndicatorBase{``0}[])">
            <summary>
            Plots the value of each indicator on the chart
            </summary>
            <param name="chart">The chart's name</param>
            <param name="indicators">The indicatorsto plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PlotIndicator``1(System.String,QuantConnect.Indicators.IndicatorBase{``0}[])">
            <summary>
            Automatically plots each indicator when a new value is available
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PlotIndicator``1(System.String,System.Boolean,QuantConnect.Indicators.IndicatorBase{``0}[])">
            <summary>
            Automatically plots each indicator when a new value is available, optionally waiting for indicator.IsReady to return true
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.String)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">String value of your runtime statistic</param>
            <seealso cref="P:QuantConnect.Algorithm.QCAlgorithm.LiveMode"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.Decimal)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">Decimal value of your runtime statistic</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.Int32)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">Int value of your runtime statistic</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.Double)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">Double value of your runtime statistic</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetChartUpdates(System.Boolean)">
            <summary>
            Get the chart updates by fetch the recent points added and return for dynamic plotting.
            </summary>
            <param name="clearChartData"></param>
            <returns>List of chart updates since the last request</returns>
            <remarks>GetChartUpdates returns the latest updates since previous request.</remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.UniverseManager">
            <summary>
            Gets universe manager which holds universes keyed by their symbol
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings">
            <summary>
            Gets the universe settings to be used when adding securities via universe selection
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Universe">
            <summary>
            Gets a helper that provides pre-defined universe defintions, such as top dollar volume
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.Data.UniverseSelection.Universe)">
            <summary>
            Adds the universe to the algorithm
            </summary>
            <param name="universe">The universe to be added</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, Market.USA, and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, Market.USA, and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Market.USA and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Market.USA and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property.
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property.
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="universeSettings">The subscription settings to use for newly created subscriptions</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="universeSettings">The subscription settings to use for newly created subscriptions</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.Func{System.Collections.Generic.IEnumerable{QuantConnect.Data.UniverseSelection.CoarseFundamental},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new univese and adds it to the algorithm. This is for coarse fundamntal US Equity data and
            will be executed on day changes in the NewYork time zone (<see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
            <param name="selector">Defines an initial coarse selection</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.String,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This can be used to return a list of string
            symbols retrieved from anywhere and will loads those symbols under the US Equity market.
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.String,QuantConnect.Resolution,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This can be used to return a list of string
            symbols retrieved from anywhere and will loads those symbols under the US Equity market.
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The resolution this universe should be triggered on</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new user defined universe that will fire on the requested resolution during market hours.
            </summary>
            <param name="securityType">The security type of the universe</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The resolution this universe should be triggered on</param>
            <param name="market">The market of the universe</param>
            <param name="universeSettings">The subscription settings used for securities added from this universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddToUserDefinedUniverse(QuantConnect.Securities.Security)">
            <summary>
            Adds the security to the user defined universe for the specified 
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.UniverseDefinitions">
            <summary>
            Provides helpers for defining universes in algorithms
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.UniverseDefinitions.Unchanged">
            <summary>
            Specifies that universe selection should not make changes on this iteration
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.UniverseDefinitions.DollarVolume">
            <summary>
            Gets a helper that provides methods for creating universes based on daily dollar volumes
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.UniverseDefinitions.#ctor(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.UniverseDefinitions"/> class
            </summary>
            <param name="algorithm">The algorithm instance, used for obtaining the default <see cref="T:QuantConnect.Data.UniverseSelection.UniverseSettings"/></param>
        </member>
    </members>
</doc>
