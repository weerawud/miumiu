<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Indicators</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Indicators.AbsolutePriceOscillator">
            <summary>
            This indicator computes the Absolute Price Oscillator (APO)
            The Absolute Price Oscillator is calculated using the following formula:
            APO[i] = FastMA[i] - SlowMA[i]
            </summary>
            <remarks>
            The Absolute Price Oscillator is the same as a MACD with the signal period equal to the slow period.
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.AbsolutePriceOscillator.#ctor(System.String,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AbsolutePriceOscillator"/> class using the specified name and parameters.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.AbsolutePriceOscillator.#ctor(System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AbsolutePriceOscillator"/> class using the specified parameters.
            </summary> 
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="T:QuantConnect.Indicators.AccumulationDistribution">
            <summary>
            This indicator computes the Accumulation/Distribution (AD)
            The Accumulation/Distribution is calculated using the following formula:
            AD = AD + ((Close - Low) - (High - Close)) / (High - Low) * Volume
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistribution.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccumulationDistribution"/> class using the specified name.
            </summary> 
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.AccumulationDistribution.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistribution.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.AccumulationDistributionOscillator">
            <summary>
            This indicator computes the Accumulation/Distribution Oscillator (ADOSC)
            The Accumulation/Distribution Oscillator is calculated using the following formula:
            ADOSC = EMA(fast,AD) - EMA(slow,AD)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccumulationDistributionOscillator"/> class using the specified parameters
            </summary> 
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccumulationDistributionOscillator"/> class using the specified parameters
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
        </member>
        <member name="P:QuantConnect.Indicators.AccumulationDistributionOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AverageDirectionalIndex">
            <summary>
            This indicator computes Average Directional Index which measures trend strength without regard to trend direction.
            Firstly, it calculates the Directional Movement and the True Range value, and then the values are accumulated and smoothed
            using a custom smoothing method proposed by Wilder. For an n period smoothing, 1/n of each period's value is added to the total period.
            From these accumulated values we are therefore able to derived the 'Positive Directional Index' (+DI) and 'Negative Directional Index' (-DI)
            which is used to calculate the Average Directional Index.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalIndex.PositiveDirectionalIndex">
            <summary>
            Gets or sets the index of the Plus Directional Indicator
            </summary>
            <value>
            The  index of the Plus Directional Indicator.
            </value>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalIndex.NegativeDirectionalIndex">
            <summary>
            Gets or sets the index of the Minus Directional Indicator
            </summary>
            <value>
            The index of the Minus Directional Indicator.
            </value>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AverageDirectionalIndex"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="period">The period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeSmoothedDirectionalMovementPlus(System.Int32)">
            <summary>
            Computes the Smoothed Directional Movement Plus value.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeSmoothedDirectionalMovementMinus(System.Int32)">
            <summary>
            Computes the Smoothed Directional Movement Minus value.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeSmoothedTrueRange(System.Int32)">
            <summary>
            Computes the Smoothed True Range value.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeTrueRange(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the True Range value.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputePositiveDirectionalMovement(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the positive directional movement.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeNegativeDirectionalMovement(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the negative directional movement.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputePositiveDirectionalIndex">
            <summary>
            Computes the Plus Directional Indicator (+DI period).
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeNegativeDirectionalIndex">
            <summary>
            Computes the Minus Directional Indicator (-DI period).
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AverageDirectionalMovementIndexRating">
            <summary>
            This indicator computes the Average Directional Movement Index Rating (ADXR). 
            The Average Directional Movement Index Rating is calculated with the following formula:
            ADXR[i] = (ADX[i] + ADX[i - period + 1]) / 2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AverageDirectionalMovementIndexRating"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the ADXR</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AverageDirectionalMovementIndexRating"/> class using the specified period.
            </summary> 
            <param name="period">The period of the ADXR</param>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.BalanceOfPower">
            <summary>
            This indicator computes the Balance Of Power (BOP). 
            The Balance Of Power is calculated with the following formula:
            BOP = (Close - Open) / (High - Low)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BalanceOfPower.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.BalanceOfPower"/> class using the specified name.
            </summary> 
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.BalanceOfPower.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BalanceOfPower.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods">
            <summary>
            Up/Down Gap Three Methods candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: white (black) candle
            - second candle: white(black) candle
            - upside(downside) gap between the first and the second real bodies
            - third candle: black(white) candle that opens within the second real body and closes within the first real body
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that up/downside gap 3 methods is significant when it appears in a trend, while this
            function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows">
            <summary>
            Upside Gap Two Crows candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: white candle, usually long
            - second candle: small black real body
            - gap between the first and the second candle's real bodies
            - third candle: black candle with a real body that engulfs the preceding candle
            and closes above the white candle's close
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is negative(-1): upside gap two crows is always bearish;
            The user should consider that an upside gap two crows is significant when it appears in an uptrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver">
            <summary>
            Unique Three River candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: black harami candle with a lower low than the first candle's low
            - third candle: small white candle with open not lower than the second candle's low, better if its open and 
            close are under the second candle's close
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive(+1): unique 3 river is always bullish and should appear in a downtrend
            to be significant, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Tristar">
            <summary>
            Tristar candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - 3 consecutive doji days
            - the second doji is a star
            The meaning of "doji" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Tristar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Tristar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Tristar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting">
            <summary>
            Thrusting candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: white candle with open below previous day low and close into previous day body under the midpoint;
            to differentiate it from in-neck the close should not be equal to the black candle's close
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is negative(-1): thrusting pattern is always bearish
            The user should consider that the thrusting pattern is significant when it appears in a downtrend and it could be
            even bullish "when coming in an uptrend or occurring twice within several days" (Steve Nison says), while this
            function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Thrusting.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap">
            <summary>
            Tasuki Gap candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - upside (downside) gap
            - first candle after the window: white(black) candlestick
            - second candle: black(white) candlestick that opens within the previous real body and closes under(above)
            the previous real body inside the gap
            - the size of two real bodies should be near the same
            The meaning of "near" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that tasuki gap is significant when it appears in a trend, while this function does 
            not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Takuri">
            <summary>
            Takuri (Dragonfly Doji with very long lower shadow) candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - open and close at the high of the day = no or very short upper shadow
            - very long lower shadow
            The meaning of "doji", "very short" and "very long" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: takuri must be considered
            relatively to the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Takuri"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Takuri"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Takuri.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich">
            <summary>
            Stick Sandwich candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: black candle
            - second candle: white candle that trades only above the prior close(low > prior close)
            - third candle: black candle with the close equal to the first candle's close
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is always positive(+1): stick sandwich is always bullish;
            The user should consider that stick sandwich is significant when coming in a downtrend,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern">
            <summary>
            Stalled Pattern candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white candlesticks with consecutively higher closes
            - first candle: long white
            - second candle: long white with no or very short upper shadow opening within or near the previous white real body
            and closing higher than the prior candle
            - third candle: small white that gaps away or "rides on the shoulder" of the prior long real body(= it's at 
            the upper end of the prior real body)
            The meanings of "long", "very short", "short", "near" are specified with SetCandleSettings;
            The returned value is negative(-1): stalled pattern is always bearish;
            The user should consider that stalled pattern is significant when it appears in uptrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop">
            <summary>
            Spinning Top candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - shadows longer than the real body
            The meaning of "short" is specified with SetCandleSettings
            The returned value is positive(+1) when white or negative(-1) when black;
            it does not mean bullish or bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle">
            <summary>
            Short Line Candle candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - short real body
            - short upper and lower shadow
            The meaning of "short" is specified with SetCandleSettings
            The returned value is positive(+1) when white, negative (-1) when black;
            it does not mean bullish or bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar">
            <summary>
            Shooting Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - small real body
            - long upper shadow
            - no, or very short, lower shadow
            - gap up from prior real body
            The meaning of "short", "very short" and "long" is specified with SetCandleSettings;
            The returned value is negative(-1): shooting star is always bearish;
            The user should consider that a shooting star must appear in an uptrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines">
            <summary>
            Separating Lines candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: black (white) candle
            - second candle: bullish(bearish) belt hold with the same open as the prior candle
            The meaning of "long body" and "very short shadow" of the belt hold is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that separating lines is significant when coming in a trend and the belt hold has
            the same direction of the trend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods">
            <summary>
            Rising/Falling Three Methods candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) candlestick
            - then: group of falling(rising) small real body candlesticks(commonly black (white)) that hold within
            the prior long candle's range: ideally they should be three but two or more than three are ok too
            - final candle: long white(black) candle that opens above(below) the previous small candle's close 
            and closes above(below) the first long candle's close
            The meaning of "short" and "long" is specified with SetCandleSettings; here only patterns with 3 small candles
            are considered;
            The returned value is positive(+1) or negative(-1)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan">
            <summary>
            Rickshaw Man candlestick pattern
            </summary>
            <remarks>
            Must have:
            - doji body
            - two long shadows
            - body near the midpoint of the high-low range
            The meaning of "doji" and "near" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: rickshaw man shows uncertainty
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Piercing">
            <summary>
            Piercing candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: long white candle with open below previous day low and close at least at 50% of previous day
            real body
            The meaning of "long" is specified with SetCandleSettings
            The returned value is positive(+1): piercing pattern is always bullish
            The user should consider that a piercing pattern is significant when it appears in a downtrend, while 
            this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Piercing"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Piercing"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Piercing.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck">
            <summary>
            On-Neck candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: white candle with open below previous day low and close equal to previous day low
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is negative(-1): on-neck is always bearish
            The user should consider that on-neck is significant when it appears in a downtrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.OnNeck.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar">
            <summary>
            Morning Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black real body
            - second candle: star(Short real body gapping down)
            - third candle: white real body that moves well within the first candle's real body
            The meaning of "short" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is positive(+1): morning star is always bullish;
            The user should consider that a morning star is significant when it appears in a downtrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MorningStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar">
            <summary>
            Morning Doji Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black real body
            - second candle: doji gapping down
            - third candle: white real body that moves well within the first candle's real body
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is positive(+1): morning doji star is always bullish;
            the user should consider that a morning star is significant when it appears in a downtrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MatHold">
            <summary>
            Mat Hold candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white candle
            - upside gap between the first and the second bodies
            - second candle: small black candle
            - third and fourth candles: falling small real body candlesticks(commonly black) that hold within the long
            white candle's body and are higher than the reaction days of the rising three methods
            - fifth candle: white candle that opens above the previous small candle's close and closes higher than the 
            high of the highest reaction day
            The meaning of "short" and "long" is specified with SetCandleSettings; 
            "hold within" means "a part of the real body must be within";
            penetration is the maximum percentage of the first white body the reaction days can penetrate(it is 
            to specify how much the reaction days should be "higher than the reaction days of the rising three methods")
            The returned value is positive(+1): mat hold is always bullish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatHold"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatHold"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MatHold.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow">
            <summary>
            Matching Low candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: black candle
            - second candle: black candle with the close equal to the previous close
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is always positive(+1): matching low is always bullish;
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu">
            <summary>
            Marubozu candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long real body
            - no or very short upper and lower shadow
            The meaning of "long" and "very short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Marubozu.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle">
            <summary>
            Long Line Candle candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long real body
            - short upper and lower shadow
            The meaning of "long" and "short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji">
            <summary>
            Long Legged Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - one or two long shadows
            The meaning of "doji" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: long legged doji shows uncertainty
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom">
            <summary>
            Ladder Bottom candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - three black candlesticks with consecutively lower opens and closes
            - fourth candle: black candle with an upper shadow(it's supposed to be not very short)
            - fifth candle: white candle that opens above prior candle's body and closes above prior candle's high
            The meaning of "very short" is specified with SetCandleSettings
            The returned value is positive (+1): ladder bottom is always bullish;
            The user should consider that ladder bottom is significant when it appears in a downtrend,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength">
            <summary>
            Kicking (bull/bear determined by the longer marubozu) candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: marubozu
            - second candle: opposite color marubozu
            - gap between the two candles: upside gap if black then white, downside gap if white then black
            The meaning of "long body" and "very short shadow" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish; the longer of the two
            marubozu determines the bullishness or bearishness of this pattern
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Kicking">
            <summary>
            Kicking candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: marubozu
            - second candle: opposite color marubozu
            - gap between the two candles: upside gap if black then white, downside gap if white then black
            The meaning of "long body" and "very short shadow" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Kicking"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Kicking"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Kicking.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer">
            <summary>
            Inverted Hammer candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - long upper shadow
            - no, or very short, lower shadow
            - gap down
            The meaning of "short", "very short" and "long" is specified with SetCandleSettings;
            The returned value is positive(+1): inverted hammer is always bullish;
            The user should consider that an inverted hammer must appear in a downtrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.InNeck">
            <summary>
            In-Neck candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: white candle with open below previous day low and close slightly into previous day body
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is negative(-1): in-neck is always bearish
            The user should consider that in-neck is significant when it appears in a downtrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InNeck"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InNeck"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.InNeck.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon">
            <summary>
            Homing Pigeon candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: short black real body completely inside the previous day's body
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive(+1): homing pigeon is always bullish;
            The user should consider that homing pigeon is significant when it appears in a downtrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle">
            <summary>
            High-Wave Candle candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - short real body
            - very long upper and lower shadow
            The meaning of "short" and "very long" is specified with SetCandleSettings
            The returned value is positive(+1) when white or negative(-1) when black;
            it does not mean bullish or bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross">
            <summary>
            Harami Cross candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) real body
            - second candle: doji totally engulfed by the first
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that a harami cross is significant when it appears in a downtrend if bullish or
            in an uptrend when bearish, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Harami">
            <summary>
            Harami candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) real body
            - second candle: short real body totally engulfed by the first
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that a harami is significant when it appears in a downtrend if bullish or
            in an uptrend when bearish, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Harami"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Harami"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Harami.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan">
            <summary>
            Hanging Man candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - long lower shadow
            - no, or very short, upper shadow
            - body above or near the highs of the previous candle
            The meaning of "short", "long" and "near the highs" is specified with SetCandleSettings;
            The returned value is negative (-1): hanging man is always bearish;
            The user should consider that a hanging man must appear in an uptrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HangingMan.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Hammer">
            <summary>
            Hammer candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - long lower shadow
            - no, or very short, upper shadow
            - body below or near the lows of the previous candle
            The meaning of "short", "long" and "near the lows" is specified with SetCandleSettings;
            The returned value is positive(+1): hammer is always bullish;
            The user should consider that a hammer must appear in a downtrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hammer"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hammer"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Hammer.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji">
            <summary>
            Gravestone Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - open and close at the low of the day = no or very short lower shadow
            - upper shadow(to distinguish from other dojis, here upper shadow should not be very short)
            The meaning of "doji" and "very short" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: gravestone doji must be considered
            relatively to the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar">
            <summary>
            Evening Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white real body
            - second candle: star(short real body gapping up)
            - third candle: black real body that moves well within the first candle's real body
            The meaning of "short" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is negative(-1): evening star is always bearish;
            The user should consider that an evening star is significant when it appears in an uptrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.EveningStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar">
            <summary>
            Evening Doji Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white real body
            - second candle: doji gapping up
            - third candle: black real body that moves well within the first candle's real body
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is negative(-1): evening star is always bearish;
            The user should consider that an evening star is significant when it appears in an uptrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji">
            <summary>
            Dragonfly Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - open and close at the high of the day = no or very short upper shadow
            - lower shadow(to distinguish from other dojis, here lower shadow should not be very short)
            The meaning of "doji" and "very short" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: dragonfly doji must be considered
            relatively to the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar">
            <summary>
            Doji Star candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long real body
            - second candle: star(open gapping up in an uptrend or down in a downtrend) with a doji
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            it's defined bullish when the long candle is white and the star gaps up, bearish when the long candle 
            is black and the star gaps down; the user should consider that a doji star is bullish when it appears
            in an uptrend and it's bearish when it appears in a downtrend, so to determine the bullishness or 
            bearishness of the pattern the trend must be analyzed
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.DojiStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover">
            <summary>
            Dark Cloud Cover candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white candle
            - second candle: black candle that opens above previous day high and closes within previous day real body; 
            Greg Morris wants the close to be below the midpoint of the previous real body
            The meaning of "long" is specified with SetCandleSettings, the penetration of the first real body is specified
            with optInPenetration
            The returned value is negative(-1): dark cloud cover is always bearish
            The user should consider that a dark cloud cover is significant when it appears in an uptrend, while 
            this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby">
            <summary>
            Abandoned Baby candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) real body
            - second candle: doji
            - third candle: black(white) real body that moves well within the first candle's real body
            - upside(downside) gap between the first candle and the doji(the shadows of the two candles don't touch)
            - downside (upside) gap between the doji and the third candle(the shadows of the two candles don't touch)
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is positive (+1) when it's an abandoned baby bottom or negative (-1) when it's
            an abandoned baby top; the user should consider that an abandoned baby is significant when it appears in 
            an uptrend or downtrend, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock">
            <summary>
            Advance Block candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white candlesticks with consecutively higher closes
            - each candle opens within or near the previous white real body
            - first candle: long white with no or very short upper shadow(a short shadow is accepted too for more flexibility)
            - second and third candles, or only third candle, show signs of weakening: progressively smaller white real bodies
            and/or relatively long upper shadows; see below for specific conditions
            The meanings of "long body", "short shadow", "far" and "near" are specified with SetCandleSettings;
            The returned value is negative(-1): advance block is always bearish;
            The user should consider that advance block is significant when it appears in uptrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu">
            <summary>
            Closing Marubozu candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long white(black) real body
            - no or very short upper(lower) shadow
            The meaning of "long" and "very short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold">
            <summary>
            Belt-hold candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long white(black) real body
            - no or very short lower(upper) shadow
            The meaning of "long" and "very short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.BeltHold.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway">
            <summary>
            Breakaway candlestick pattern indicator
            </summary>
            <remarks>
             Must have:
            - first candle: long black(white)
            - second candle: black(white) day whose body gaps down(up)
            - third candle: black or white day with lower(higher) high and lower(higher) low than prior candle's
            - fourth candle: black(white) day with lower(higher) high and lower(higher) low than prior candle's
            - fifth candle: white(black) day that closes inside the gap, erasing the prior 3 days
            The meaning of "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that breakaway is significant in a trend opposite to the last candle, while this
            function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Breakaway.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType">
            <summary>
            Types of candlestick settings
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyLong">
            <summary>
            Real body is long when it's longer than the average of the 10 previous candles' real body
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyVeryLong">
            <summary>
            Real body is very long when it's longer than 3 times the average of the 10 previous candles' real body
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyShort">
            <summary>
            Real body is short when it's shorter than the average of the 10 previous candles' real bodies
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyDoji">
            <summary>
            Real body is like doji's body when it's shorter than 10% the average of the 10 previous candles' high-low range
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowLong">
            <summary>
            Shadow is long when it's longer than the real body
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowVeryLong">
            <summary>
            Shadow is very long when it's longer than 2 times the real body
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowShort">
            <summary>
            Shadow is short when it's shorter than half the average of the 10 previous candles' sum of shadows
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowVeryShort">
            <summary>
            Shadow is very short when it's shorter than 10% the average of the 10 previous candles' high-low range
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.Near">
            <summary>
            When measuring distance between parts of candles or width of gaps
            "near" means "&lt;= 20% of the average of the 5 previous candles' high-low range"
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.Far">
            <summary>
            When measuring distance between parts of candles or width of gaps
            "far" means "&gt;= 60% of the average of the 5 previous candles' high-low range"
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.Equal">
            <summary>
            When measuring distance between parts of candles or width of gaps
            "equal" means "&lt;= 5% of the average of the 5 previous candles' high-low range"
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType">
            <summary>
            Types of candlestick ranges
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType.RealBody">
            <summary>
            The part of the candle between open and close
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType.HighLow">
            <summary>
            The complete range of the candle
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType.Shadows">
            <summary>
            The shadows (or tails) of the candle
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleColor">
            <summary>
            Colors of a candle
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleColor.White">
            <summary>
            White is an up candle (close higher or equal than open)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleColor.Black">
            <summary>
            Black is a down candle (close lower than open)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleSettings">
            <summary>
            Candle settings for all candlestick patterns
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettings.DefaultSettings">
            <summary>
            Default settings for all candle setting types
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandleSettings.Get(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType)">
            <summary>
            Returns the candle setting for the requested type
            </summary>
            <param name="type">The candle setting type</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandleSettings.Set(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType,QuantConnect.Indicators.CandlestickPatterns.CandleSetting)">
            <summary>
            Changes the default candle setting for the requested type
            </summary>
            <param name="type">The candle setting type</param>
            <param name="setting">The candle setting</param>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleSetting">
            <summary>
            Represents a candle setting
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.RangeType">
            <summary>
            The candle range type
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.AveragePeriod">
            <summary>
            The number of previous candles to average
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.Factor">
            <summary>
            A multiplier to calculate candle ranges
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.#ctor(QuantConnect.Indicators.CandlestickPatterns.CandleRangeType,System.Int32,System.Decimal)">
            <summary>
            Creates an instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.CandleSetting"/> class
            </summary>
            <param name="rangeType">The range type</param>
            <param name="averagePeriod">The average period</param>
            <param name="factor">The factor</param>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern">
            <summary>
            Abstract base class for a candlestick pattern indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern"/> with the specified name
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The number of data points to hold in the window</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleColor(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns the candle color of a candle
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetRealBody(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns the distance between the close and the open of a candle
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetHighLowRange(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns the full range of the candle
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleRange(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns the range of a candle
            </summary>
            <param name="type">The type of setting to use</param>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleGapUp(QuantConnect.Data.Market.TradeBar,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns true if the candle is higher than the previous one
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleGapDown(QuantConnect.Data.Market.TradeBar,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns true if the candle is lower than the previous one
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetRealBodyGapUp(QuantConnect.Data.Market.TradeBar,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns true if the candle is higher than the previous one (with no body overlap)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetRealBodyGapDown(QuantConnect.Data.Market.TradeBar,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns true if the candle is lower than the previous one (with no body overlap)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetLowerShadow(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns the range of the candle's lower shadow
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetUpperShadow(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns the range of the candle's upper shadow
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleAverage(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType,System.Decimal,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Returns the average range of the previous candles
            </summary>
            <param name="type">The type of setting to use</param>
            <param name="sum">The sum of the previous candles ranges</param>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified">
            <summary>
            Hikkake Modified candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle
            - second candle: candle with range less than first candle and close near the bottom(near the top)
            - third candle: lower high and higher low than 2nd
            - fourth candle: lower high and lower low(higher high and higher low) than 3rd
            The returned value for the hikkake bar is positive(+1) or negative(-1) meaning bullish or bearish hikkake
            Confirmation could come in the next 3 days with:
            - a day that closes higher than the high(lower than the low) of the 3rd candle
            The returned value for the confirmation bar is equal to 1 + the bullish hikkake result or -1 - the bearish hikkake result
            Note: if confirmation and a new hikkake come at the same bar, only the new hikkake is reported(the new hikkake
            overwrites the confirmation of the old hikkake);
            The user should consider that modified hikkake is a reversal pattern, while hikkake could be both a reversal
            or a continuation pattern, so bullish(bearish) modified hikkake is significant when appearing in a downtrend(uptrend)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows">
            <summary>
            Three Black Crows candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three consecutive and declining black candlesticks
            - each candle must have no or very short lower shadow
            - each candle after the first must open within the prior candle's real body
            - the first candle's close should be under the prior white candle's high
            The meaning of "very short" is specified with SetCandleSettings
            The returned value is negative (-1): three black crows is always bearish;
            The user should consider that 3 black crows is significant when it appears after a mature advance or at high levels,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite">
            <summary>
            Up/Down-gap side-by-side white lines candlestick pattern
            </summary>
            <remarks>
            Must have:
            - upside or downside gap (between the bodies)
            - first candle after the window: white candlestick
            - second candle after the window: white candlestick with similar size(near the same) and about the same
            open(equal) of the previous candle
            - the second candle does not close the window
            The meaning of "near" and "equal" is specified with SetCandleSettings
            The returned value is positive(+1) or negative(-1): the user should consider that upside
            or downside gap side-by-side white lines is significant when it appears in a trend, while this function
            does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside">
            <summary>
            Three Inside Up/Down candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white(black) real body
            - second candle: short real body totally engulfed by the first
            - third candle: black(white) candle that closes lower(higher) than the first candle's open
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive (+1) for the three inside up or negative (-1) for the three inside down;
            The user should consider that a three inside up is significant when it appears in a downtrend and a three inside
            down is significant when it appears in an uptrend, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow">
            <summary>
            Concealed Baby Swallow candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: black marubozu (very short shadows)
            - second candle: black marubozu(very short shadows)
            - third candle: black candle that opens gapping down but has an upper shadow that extends into the prior body
            - fourth candle: black candle that completely engulfs the third candle, including the shadows
            The meanings of "very short shadow" are specified with SetCandleSettings;
            The returned value is positive(+1): concealing baby swallow is always bullish;
            The user should consider that concealing baby swallow is significant when it appears in downtrend, while 
            this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike">
            <summary>
            Three Line Strike candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white soldiers (three black crows): three white (black) candlesticks with consecutively higher (lower) closes,
            each opening within or near the previous real body
            - fourth candle: black (white) candle that opens above (below) prior candle's close and closes below (above) 
            the first candle's open
            The meaning of "near" is specified with SetCandleSettings;
            The returned value is positive (+1) when bullish or negative (-1) when bearish;
            The user should consider that 3-line strike is significant when it appears in a trend in the same direction of
            the first three candles, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing">
            <summary>
            Engulfing candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first: black (white) real body
            - second: white(black) real body that engulfs the prior real body
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that an engulfing must appear in a downtrend if bullish or in an uptrend if bearish,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Engulfing.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Engulfing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Engulfing.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Engulfing.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake">
            <summary>
            Hikkake candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first and second candle: inside bar (2nd has lower high and higher low than 1st)
            - third candle: lower high and lower low than 2nd(higher high and higher low than 2nd)
            The returned value for the hikkake bar is positive(+1) or negative(-1) meaning bullish or bearish hikkake
            Confirmation could come in the next 3 days with:
            - a day that closes higher than the high(lower than the low) of the 2nd candle
            The returned value for the confirmation bar is equal to 1 + the bullish hikkake result or -1 - the bearish hikkake result
            Note: if confirmation and a new hikkake come at the same bar, only the new hikkake is reported(the new hikkake
            overwrites the confirmation of the old hikkake)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Hikkake.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside">
            <summary>
            Three Outside Up/Down candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first: black(white) real body
            - second: white(black) real body that engulfs the prior real body
            - third: candle that closes higher(lower) than the second candle
            The returned value is positive (+1) for the three outside up or negative (-1) for the three outside down;
            The user should consider that a three outside up must appear in a downtrend and three outside down must appear
            in an uptrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack">
            <summary>
            Counterattack candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black (white)
            - second candle: long white(black) with close equal to the prior close
            The meaning of "equal" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that counterattack is significant in a trend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Counterattack.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth">
            <summary>
            Three Stars In The South candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle with long lower shadow
            - second candle: smaller black candle that opens higher than prior close but within prior candle's range 
            and trades lower than prior close but not lower than prior low and closes off of its low(it has a shadow)
            - third candle: small black marubozu(or candle with very short shadows) engulfed by prior candle's range
            The meanings of "long body", "short body", "very short shadow" are specified with SetCandleSettings;
            The returned value is positive (+1): 3 stars in the south is always bullish;
            The user should consider that 3 stars in the south is significant when it appears in downtrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows">
            <summary>
            Identical Three Crows candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three consecutive and declining black candlesticks
            - each candle must have no or very short lower shadow
            - each candle after the first must open at or very close to the prior candle's close
            The meaning of "very short" is specified with SetCandleSettings;
            the meaning of "very close" is specified with SetCandleSettings(Equal);
            The returned value is negative(-1): identical three crows is always bearish;
            The user should consider that identical 3 crows is significant when it appears after a mature advance or at high levels,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers">
            <summary>
            Three Advancing White Soldiers candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white candlesticks with consecutively higher closes
            - Greg Morris wants them to be long, Steve Nison doesn't; anyway they should not be short
            - each candle opens within or near the previous white real body
            - each candle must have no or very short upper shadow
            - to differentiate this pattern from advance block, each candle must not be far shorter than the prior candle
            The meanings of "not short", "very short shadow", "far" and "near" are specified with SetCandleSettings;
            here the 3 candles must be not short, if you want them to be long use SetCandleSettings on BodyShort;
            The returned value is positive (+1): advancing 3 white soldiers is always bullish;
            The user should consider that 3 white soldiers is significant when it appears in downtrend, while this function 
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Doji">
            <summary>
            Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - open quite equal to close
            How much can be the maximum distance between open and close is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: doji shows uncertainty and it is
            neither bullish nor bearish when considered alone
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Doji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Doji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Doji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows">
            <summary>
            Two Crows candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long white candle
            - second candle: black real body
            - gap between the first and the second candle's real bodies
            - third candle: black candle that opens within the second real body and closes within the first real body
            The meaning of "long" is specified with SetCandleSettings
            The returned value is negative (-1): two crows is always bearish;
            The user should consider that two crows is significant when it appears in an uptrend, while this function
            does not consider the trend.
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.TradeBar},QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ChandeMomentumOscillator">
            <summary>
            This indicator computes the Chande Momentum Oscillator (CMO). 
            CMO calculation is mostly identical to RSI.
            The only difference is in the last step of calculation:
            RSI = gain / (gain+loss)
            CMO = (gain-loss) / (gain+loss)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ChandeMomentumOscillator"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ChandeMomentumOscillator"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.ChandeMomentumOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.DonchianChannel">
            <summary>
            This indicator computes the upper and lower band of the Donchian Channel.
            The upper band is computed by finding the highest high over the given period.
            The lower band is computed by finding the lowest low over the given period.
            The primary output value of the indicator is the mean of the upper and lower band for 
            the given timeframe.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DonchianChannel.UpperBand">
            <summary>
            Gets the upper band of the Donchian Channel.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DonchianChannel.LowerBand">
            <summary>
            Gets the lower band of the Donchian Channel.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DonchianChannel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="period">The period for both the upper and lower channels.</param>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DonchianChannel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="upperPeriod">The period for the upper channel.</param>
            <param name="lowerPeriod">The period for the lower channel</param>
        </member>
        <member name="P:QuantConnect.Indicators.DonchianChannel.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator, which by convention is the mean value of the upper band and lower band.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.DoubleExponentialMovingAverage">
            <summary>
            This indicator computes the Double Exponential Moving Average (DEMA).
            The Double Exponential Moving Average is calculated with the following formula:
            EMA2 = EMA(EMA(t,period),period)
            DEMA = 2 * EMA(t,period) - EMA2
            The Generalized DEMA (GD) is calculated with the following formula:
            GD = (volumeFactor+1) * EMA(t,period) - volumeFactor * EMA2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DoubleExponentialMovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the DEMA</param>
            <param name="volumeFactor">The volume factor of the DEMA (value must be in the [0,1] range, set to 1 for standard DEMA)</param>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DoubleExponentialMovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the DEMA</param>
            <param name="volumeFactor">The volume factor of the DEMA (value must be in the [0,1] range, set to 1 for standard DEMA)</param>
        </member>
        <member name="P:QuantConnect.Indicators.DoubleExponentialMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator">
            <summary>
            Volume Weighted Average Price (VWAP) Indicator:
            It is calculated by adding up the dollars traded for every transaction (price multiplied
            by number of shares traded) and then dividing by the total shares traded for the day.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator._price">
            <summary>
            In this VWAP calculation, typical price is defined by (O + H + L + C) / 4
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the VWAP class with the default name and period
            </summary>
            <param name="period">The period of the VWAP</param>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the VWAP class with a given name and period
            </summary>
            <param name="name">string - the name of the indicator</param>
            <param name="period">The period of the VWAP</param>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.FisherTransform">
            <summary>
            The Fisher transform is a mathematical process which is used to convert any data set to a modified
            data set whose Probabilty Distrbution Function is approximately Gaussian.  Once the Fisher transform
            is computed, the transformed data can then be analyzed in terms of it's deviation from the mean.
            
            The equation is y = .5 * ln [ 1 + x / 1 - x ] where
            x is the input
            y is the output
            ln is the natural logarithm
            
            The Fisher transform has much sharper turning points than other indicators such as MACD
            
            For more info, read chapter 1 of Cybernetic Analysis for Stocks and Futures by John F. Ehlers
            
            We are implementing the lastest version of this indicator found at Fig. 4 of
            http://www.mesasoftware.com/papers/UsingTheFisherTransform.pdf
            
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the FisherTransform class with the default name and period
            </summary>
            <param name="period">The period of the WMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.#ctor(System.String,System.Int32)">
            <summary>
            A Fisher Transform of Prices
            </summary>
            <param name="name">string - the name of the indicator</param>
            <param name="period">The number of periods for the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.FisherTransform.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value in the transform. 
            value1 is a function used to normalize price withing the last _period day range.
            value1 is centered on its midpoint and then doubled so that value1 wil swing between -1 and +1.  
            value1 is also smoothed with an exponential moving average whose alpha is 0.33.  
            
            Since the smoothing may allow value1 to exceed the _period day price range, limits are introduced to 
            preclude the transform from blowing up by having an input larger than unity.
            </summary>
            <param name="input">IndicatorDataPoint - the time and value of the next price</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.FisherTransformFunction(System.Double)">
            <summary>
            The Fisher transform is a mathematical process which is used to convert any data set to a modified
            data set whose Probabilty Distrbution Function is approximately Gaussian.  Once the Fisher transform
            is computed, the transformed data can then be analyzed in terms of it's deviation from the mean.
            
            The equation is y = .5 * ln [ 1 + x / 1 - x ] where
            x is the input
            y is the output
            ln is the natural logarithm
            
            The Fisher transform has much sharper turning points than other indicators such as MACD
            
            For more info, read chapter 1 of Cybernetic Analysis for Stocks and Futures by John F. Ehlers
            </summary>
            <param name="x">Input</param>
            <returns>Output</returns>
        </member>
        <member name="T:QuantConnect.Indicators.HeikinAshi">
            <summary>
            This indicator computes the Heikin-Ashi bar (HA)
            The Heikin-Ashi bar is calculated using the following formulas:
            HA_Close[0] = (Open[0] + High[0] + Low[0] + Close[0]) / 4
            HA_Open[0] = (HA_Open[1] + HA_Close[1]) / 2
            HA_High[0] = MAX(High[0], HA_Open[0], HA_Close[0])
            HA_Low[0] = MIN(Low[0], HA_Open[0], HA_Close[0])
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.Open">
            <summary>
            Gets the Heikin-Ashi Open
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.High">
            <summary>
            Gets the Heikin-Ashi High
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.Low">
            <summary>
            Gets the Heikin-Ashi Low
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.Close">
            <summary>
            Gets the Heikin-Ashi Close
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.CurrentBar">
            <summary>
            Gets the Heikin-Ashi current TradeBar
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.HeikinAshi"/> class using the specified name.
            </summary> 
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.HeikinAshi"/> class.
            </summary> 
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns> A new value for this indicator </returns>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.IchimokuKinkoHyo">
            <summary>
            This indicator computes the Ichimoku Kinko Hyo indicator. It consists of the following main indicators:
            Tenkan-sen: (Highest High + Lowest Low) / 2 for the specific period (normally 9)
            Kijun-sen: (Highest High + Lowest Low) / 2 for the specific period (normally 26)
            Senkou A Span: (Tenkan-sen + Kijun-sen )/ 2 from a specific number of periods ago (normally 26)
            Senkou B Span: (Highest High + Lowest Low) / 2 for the specific period (normally 52), from a specific number of periods ago (normally 26)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.Tenkan">
            <summary>
            The Tenkan-sen component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.Kijun">
            <summary>
            The Kijun-sen component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouA">
            <summary>
            The Senkou A Span component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouB">
            <summary>
            The Senkou B Span component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.TenkanMaximum">
            <summary>
            The Tenkan-sen Maximum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.TenkanMinimum">
            <summary>
            The Tenkan-sen Minimum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.KijunMaximum">
            <summary>
            The Kijun-sen Maximum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.KijunMinimum">
            <summary>
            The Kijun-sen Minimum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouBMaximum">
            <summary>
            The Senkou B Maximum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouBMinimum">
            <summary>
            The Senkou B Minimum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedTenkanSenkouA">
            <summary>
            The Delayed Tenkan Senkou A component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedKijunSenkouA">
            <summary>
            The Delayed Kijun Senkou A component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedMaximumSenkouB">
            <summary>
            The Delayed Maximum Senkou B component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedMinimumSenkouB">
            <summary>
            The Delayed Minimum Senkou B component of the Ichimoku indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IchimokuKinkoHyo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new IchimokuKinkoHyo indicator from the specific periods
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="tenkanPeriod">The Tenkan-sen period</param>
            <param name="kijunPeriod">The Kijun-sen period</param>
            <param name="senkouAPeriod">The Senkou A Span period</param>
            <param name="senkouBPeriod">The Senkou B Span period</param>
            <param name="senkouADelayPeriod">The Senkou A Span delay</param>
            <param name="senkouBDelayPeriod">The Senkou B Span delay</param>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.IsReady">
            <summary>
            Returns true if all of the sub-components of the Ichimoku indicator is ready
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IchimokuKinkoHyo.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IchimokuKinkoHyo.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorResult">
            <summary>
            Represents the result of an indicator's calculations
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorResult.Value">
            <summary>
            The indicator output value
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorResult.Status">
            <summary>
            The indicator status
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorResult.#ctor(System.Decimal,QuantConnect.Indicators.IndicatorStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.IndicatorResult"/> class
            </summary>
            <param name="value">The value output by the indicator</param>
            <param name="status">The status returned by the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorResult.op_Implicit(System.Decimal)~QuantConnect.Indicators.IndicatorResult">
            <summary>
            Converts the specified decimal value into a successful indicator result
            </summary>
            <remarks>
            This method is provided for backwards compatibility
            </remarks>
            <param name="value">The decimal value to be converted into an <see cref="T:QuantConnect.Indicators.IndicatorResult"/></param>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorStatus">
            <summary>
            The possible states returned by <see cref="M:QuantConnect.Indicators.IndicatorBase`1.ComputeNextValue(`0)"/>
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorStatus.Success">
            <summary>
            The indicator successfully calculated a value for the input data
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorStatus.InvalidInput">
            <summary>
            The indicator detected an invalid input data point or tradebar
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorStatus.MathError">
            <summary>
            The indicator encountered a math error during calculations
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage">
            <summary>
            This indicator computes the Kaufman Adaptive Moving Average (KAMA).
            The Kaufman Adaptive Moving Average is calculated as explained here:
            http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:kaufman_s_adaptive_moving_average
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the KAMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the KAMA</param>
        </member>
        <member name="P:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.KeltnerChannels">
            <summary> 
            This indicator creates a moving average (middle band) with an upper band and lower band
            fixed at k average true range multiples away from the middle band.  
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.MiddleBand">
            <summary>
            Gets the middle band of the channel
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.UpperBand">
            <summary>
            Gets the upper band of the channel
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.LowerBand">
            <summary>
            Gets the lower band of the channel
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.AverageTrueRange">
            <summary>
            Gets the average true range
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.#ctor(System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the KeltnerChannels class
            </summary>
            <param name="period">The period of the average true range and moving average (middle band)</param>
            <param name="k">The number of multiplies specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.#ctor(System.String,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the KeltnerChannels class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the average true range and moving average (middle band)</param>
            <param name="k">The number of multiples specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The TradeBar to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.ComputeLowerBand">
            <summary>
            Calculates the lower band
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.ComputeUpperBand">
            <summary>
            Calculates the upper band
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.LeastSquaresMovingAverage">
            <summary>
            The Least Squares Moving Average (LSMA) first calculates a least squares regression line
            over the preceding time periods, and then projects it forward to the current period. In
            essence, it calculates what the value would be if the regression line continued.
            Source: https://rtmath.net/helpFinAnalysis/html/b3fab79c-f4b2-40fb-8709-fdba43cdb363.htm
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.LeastSquaresMovingAverage.t">
            <summary>
            Array representing the time.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.LeastSquaresMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.LeastSquaresMovingAverage"/> class.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The number of data points to hold in the window</param>
        </member>
        <member name="M:QuantConnect.Indicators.LeastSquaresMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.LeastSquaresMovingAverage"/> class.
            </summary>
            <param name="period">The number of data points to hold in the window.</param>
        </member>
        <member name="M:QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window"></param>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="T:QuantConnect.Indicators.LogReturn">
            <summary>
                Represents the LogReturn indicator (LOGR)
                 - log returns are useful for identifying price convergence/divergence in a given period
                 - logr = log (current price / last price in period)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.LogReturn.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the LogReturn class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the LOGR</param>
        </member>
        <member name="M:QuantConnect.Indicators.LogReturn.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the LogReturn class with the default name and period
            </summary>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.LogReturn.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
                Computes the next value for this indicator from the given state.
                 - logr = log (current price / last price in period)
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MidPrice">
            <summary>
            This indicator computes the MidPrice (MIDPRICE).
            The MidPrice is calculated using the following formula:
            MIDPRICE = (Highest High + Lowest Low) / 2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPrice.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPrice"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the MIDPRICE</param>
        </member>
        <member name="M:QuantConnect.Indicators.MidPrice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPrice"/> class using the specified period.
            </summary> 
            <param name="period">The period of the MIDPRICE</param>
        </member>
        <member name="P:QuantConnect.Indicators.MidPrice.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPrice.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MidPoint">
            <summary>
            This indicator computes the MidPoint (MIDPOINT)
            The MidPoint is calculated using the following formula:
            MIDPOINT = (Highest Value + Lowest Value) / 2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPoint"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the MIDPOINT</param>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPoint"/> class using the specified period.
            </summary> 
            <param name="period">The period of the MIDPOINT</param>
        </member>
        <member name="P:QuantConnect.Indicators.MidPoint.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MomersionIndicator">
            <summary> 
            Oscillator indicator that measures momentum and mean-reversion over a specified
            period n.
            Source: Harris, Michael. "Momersion Indicator." Price Action Lab.,
                        13 Aug. 2015. Web. http://www.priceactionlab.com/Blog/2015/08/momersion-indicator/.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MomersionIndicator._minPeriod">
            <summary>
            The minimum observations needed to consider the indicator ready. After that observation
            number is reached, the indicator will continue gathering data until the full period.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MomersionIndicator._fullPeriod">
            <summary>
            The final full period used to estimate the indicator.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MomersionIndicator._multipliedDiffWindow">
            <summary>
            The rolling window used to store the momentum.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.#ctor(System.String,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MomersionIndicator"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="minPeriod">The minimum period.</param>
            <param name="fullPeriod">The full period.</param>
            <exception cref="T:System.ArgumentException">The minimum period should be greater of 3.;minPeriod</exception>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MomersionIndicator"/> class.
            </summary>
            <param name="minPeriod">The minimum period.</param>
            <param name="fullPeriod">The full period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MomersionIndicator"/> class.
            </summary>
            <param name="fullPeriod">The full period.</param>
        </member>
        <member name="P:QuantConnect.Indicators.MomersionIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window"></param>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="T:QuantConnect.Indicators.NormalizedAverageTrueRange">
            <summary>
            This indicator computes the Normalized Average True Range (NATR).
            The Normalized Average True Range is calculated with the following formula:
            NATR = (ATR(period) / Close) * 100
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.NormalizedAverageTrueRange"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the NATR</param>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.NormalizedAverageTrueRange"/> class using the specified period.
            </summary> 
            <param name="period">The period of the NATR</param>
        </member>
        <member name="P:QuantConnect.Indicators.NormalizedAverageTrueRange.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.OnBalanceVolume">
            <summary>
            This indicator computes the On Balance Volume (OBV). 
            The On Balance Volume is calculated by determining the price of the current close price and previous close price.
            If the current close price is equivalent to the previous price the OBV remains the same,
            If the current close price is higher the volume of that day is added to the OBV, while a lower close price will
            result in negative value.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OnBalanceVolume.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary> 
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.OnBalanceVolume.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OnBalanceVolume.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns> A new value for this indicator </returns>
        </member>
        <member name="M:QuantConnect.Indicators.OnBalanceVolume.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.LinearWeightedMovingAverage">
            <summary>
            Represents the traditional Weighted Moving Average indicator.  The weight are linearly
            distributed according to the number of periods in the indicator. 
            
            For example, a 4 period indicator will have a numerator of (4 * window[0]) + (3 * window[1]) + (2 * window[2]) + window[3]
            and a denominator of 4 + 3 + 2 + 1 = 10
            
            During the warm up period, IsReady will return false, but the LWMA will still be computed correctly because
            the denominator will be the minimum of Samples factorial or Size factorial and 
            the computation iterates over that minimum value.
            
            The RollingWindow of inputs is created when the indicator is created.
            A RollingWindow of LWMAs is not saved.  That is up to the caller.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.LinearWeightedMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the LinearWeightedMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.LinearWeightedMovingAverage.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the LinearWeightedMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.LinearWeightedMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.ParabolicStopAndReverse">
            <summary>
            Parabolic SAR Indicator 
            Based on TA-Lib implementation
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.#ctor(System.String,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Create new Parabolic SAR
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="afStart">Acceleration factor start value</param>
            <param name="afIncrement">Acceleration factor increment value</param>
            <param name="afMax">Acceleration factor max value</param>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.#ctor(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Create new Parabolic SAR
            </summary>
            <param name="afStart">Acceleration factor start value</param>
            <param name="afIncrement">Acceleration factor increment value</param>
            <param name="afMax">Acceleration factor max value</param>
        </member>
        <member name="P:QuantConnect.Indicators.ParabolicStopAndReverse.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The trade bar input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.Init(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Initialize the indicator values 
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.HandleLongPosition(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Calculate indicator value when the position is long
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.HandleShortPosition(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Calculate indicator value when the position is short
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.PercentagePriceOscillator">
            <summary>
            This indicator computes the Percentage Price Oscillator (PPO)
            The Percentage Price Oscillator is calculated using the following formula:
            PPO[i] = 100 * (FastMA[i] - SlowMA[i]) / SlowMA[i]
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PercentagePriceOscillator.#ctor(System.String,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.PercentagePriceOscillator"/> class using the specified name and parameters.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.PercentagePriceOscillator.#ctor(System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.PercentagePriceOscillator"/> class using the specified parameters.
            </summary> 
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.PercentagePriceOscillator.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.WindowIdentity">
            <summary>
            Represents an indicator that is a ready after ingesting enough samples (# samples > period) 
            and always returns the same value as it is given.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIdentity.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WindowIdentity class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the WindowIdentity</param>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIdentity.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the WindowIdentity class with the default name and period
            </summary>
            <param name="period">The period of the WindowIdentity</param>
        </member>
        <member name="P:QuantConnect.Indicators.WindowIdentity.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIdentity.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.T3MovingAverage">
            <summary>
            This indicator computes the T3 Moving Average (T3). 
            The T3 Moving Average is calculated with the following formula:
            EMA1(x, Period) = EMA(x, Period)
            EMA2(x, Period) = EMA(EMA1(x, Period),Period)
            GD(x, Period, volumeFactor) = (EMA1(x, Period)*(1+volumeFactor)) - (EMA2(x, Period)* volumeFactor)
            T3 = GD(GD(GD(t, Period, volumeFactor), Period, volumeFactor), Period, volumeFactor);
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.T3MovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the T3MovingAverage</param>
            <param name="volumeFactor">The volume factor of the T3MovingAverage (value must be in the [0,1] range, defaults to 0.7)</param>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.T3MovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the T3MovingAverage</param>
            <param name="volumeFactor">The volume factor of the T3MovingAverage (value must be in the [0,1] range, defaults to 0.7)</param>
        </member>
        <member name="P:QuantConnect.Indicators.T3MovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RateOfChangeRatio">
            <summary>
            This indicator computes the Rate Of Change Ratio (ROCR). 
            The Rate Of Change Ratio is calculated with the following formula:
            ROCR = price / prevPrice
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangeRatio.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RateOfChangeRatio"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the ROCR</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangeRatio.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RateOfChangeRatio"/> class using the specified period.
            </summary> 
            <param name="period">The period of the ROCR</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangeRatio.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Trix">
            <summary>
            This indicator computes the TRIX (1-period ROC of a Triple EMA)
            The Accumulation/Distribution Oscillator is calculated as explained here:
            http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:trix
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Trix"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Trix"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.Trix.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.TrueRange">
            <summary>
            This indicator computes the True Range (TR). 
            The True Range is the greatest of the following values: 
            value1 = distance from today's high to today's low.
            value2 = distance from yesterday's close to today's high.
            value3 = distance from yesterday's close to today's low.    
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TrueRange.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TrueRange"/> class using the specified name.
            </summary> 
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.TrueRange.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TrueRange.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.TripleExponentialMovingAverage">
            <summary>
            This indicator computes the Triple Exponential Moving Average (TEMA). 
            The Triple Exponential Moving Average is calculated with the following formula:
            EMA1 = EMA(t,period)
            EMA2 = EMA(EMA(t,period),period)
            EMA3 = EMA(EMA(EMA(t,period),period),period)
            TEMA = 3 * EMA1 - 3 * EMA2 + EMA3
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TripleExponentialMovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the TEMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TripleExponentialMovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the TEMA</param>
        </member>
        <member name="P:QuantConnect.Indicators.TripleExponentialMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.TriangularMovingAverage">
            <summary>
            This indicator computes the Triangular Moving Average (TRIMA). 
            The Triangular Moving Average is calculated with the following formula:
            (1) When the period is even, TRIMA(x,period)=SMA(SMA(x,period/2),(period/2)+1)
            (2) When the period is odd,  TRIMA(x,period)=SMA(SMA(x,(period+1)/2),(period+1)/2)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TriangularMovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TriangularMovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.TriangularMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.UltimateOscillator">
            <summary>
            This indicator computes the Ultimate Oscillator (ULTOSC)
            The Ultimate Oscillator is calculated as explained here:
            http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ultimate_oscillator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.UltimateOscillator"/> class using the specified parameters
            </summary>
            <param name="period1">The first period</param>
            <param name="period2">The second period</param>
            <param name="period3">The third period</param>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.UltimateOscillator"/> class using the specified parameters
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period1">The first period</param>
            <param name="period2">The second period</param>
            <param name="period3">The third period</param>
        </member>
        <member name="P:QuantConnect.Indicators.UltimateOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Variance">
            <summary>
            This indicator computes the n-period population variance.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Variance"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Variance"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.Variance.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.WilliamsPercentR">
            <summary>
            Williams %R, or just %R, is the current closing price in relation to the high and low of
            the past N days (for a given N). The value of this indicator fluctuats between -100 and 0. 
            The symbol is said to be oversold when the oscillator is below -80%,
            and overbought when the oscillator is above -20%. 
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilliamsPercentR.Maximum">
            <summary>
            Gets the Maximum indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilliamsPercentR.Minimum">
            <summary>
            Gets the Minimum indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilliamsPercentR.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.#ctor(System.Int32)">
            <summary>
            Creates a new Williams %R.
            </summary>
            <param name="period">The lookback period to determine the highest high for the AroonDown</param>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Williams %R.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The lookback period to determine the highest high for the AroonDown</param>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.Reset">
            <summary>
            Resets this indicator and both sub-indicators (Max and Min)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.AroonOscillator">
            <summary>
            The Aroon Oscillator is the difference between AroonUp and AroonDown. The value of this
            indicator fluctuats between -100 and +100. An upward trend bias is present when the oscillator
            is positive, and a negative trend bias is present when the oscillator is negative. AroonUp/Down
            values over 75 identify strong trends in their respective direction.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AroonOscillator.AroonUp">
            <summary>
            Gets the AroonUp indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AroonOscillator.AroonDown">
            <summary>
            Gets the AroonDown indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AroonOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new AroonOscillator from the specified up/down periods.
            </summary>
            <param name="upPeriod">The lookback period to determine the highest high for the AroonDown</param>
            <param name="downPeriod">The lookback period to determine the lowest low for the AroonUp</param>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new AroonOscillator from the specified up/down periods.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="upPeriod">The lookback period to determine the highest high for the AroonDown</param>
            <param name="downPeriod">The lookback period to determine the lowest low for the AroonUp</param>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.ComputeAroonUp(System.Int32,QuantConnect.Indicators.Maximum,QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            AroonUp = 100 * (period - {periods since max})/period
            </summary>
            <param name="upPeriod">The AroonUp period</param>
            <param name="max">A Maximum indicator used to compute periods since max</param>
            <param name="input">The next input data</param>
            <returns>The AroonUp value</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.ComputeAroonDown(System.Int32,QuantConnect.Indicators.Minimum,QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            AroonDown = 100 * (period - {periods since min})/period
            </summary>
            <param name="downPeriod">The AroonDown period</param>
            <param name="min">A Minimum indicator used to compute periods since min</param>
            <param name="input">The next input data</param>
            <returns>The AroonDown value</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.Reset">
            <summary>
            Resets this indicator and both sub-indicators (AroonUp and AroonDown)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AverageTrueRange">
            <summary>
            The AverageTrueRange indicator is a measure of volatility introduced by Welles Wilder in his
            book: New Concepts in Technical Trading Systems.  This indicator computes the TrueRange and then
            smoothes the TrueRange over a given period.
            
            TrueRange is defined as the maximum of the following:
              High - Low
              ABS(High - PreviousClose)
              ABS(Low  - PreviousClose)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.AverageTrueRange._smoother">
            <summary>This indicator is used to smooth the TrueRange computation</summary>
            <remarks>This is not exposed publicly since it is the same value as this indicator, meaning
            that this '_smoother' computers the ATR directly, so exposing it publicly would be duplication</remarks>
        </member>
        <member name="P:QuantConnect.Indicators.AverageTrueRange.TrueRange">
            <summary>
            Gets the true range which is the more volatile calculation to be smoothed by this indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageTrueRange.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new AverageTrueRange indicator using the specified period and moving average type
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The smoothing period used to smooth the true range values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new AverageTrueRange indicator using the specified period and moving average type
            </summary>
            <param name="period">The smoothing period used to smooth the true range values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.ComputeTrueRange(QuantConnect.Data.Market.TradeBar,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the TrueRange from the current and previous trade bars
            
            TrueRange is defined as the maximum of the following:
              High - Low
              ABS(High - PreviousClose)
              ABS(Low  - PreviousClose)
            </summary>
            <param name="previous">The previous trade bar</param>
            <param name="current">The current trade bar</param>
            <returns>The true range</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CommodityChannelIndex">
             <summary>
                 Represents the traditional commodity channel index (CCI)
                 
                 CCI = (Typical Price - 20-period SMA of TP) / (.015 * Mean Deviation)
                 Typical Price (TP) = (High + Low + Close)/3
                 Constant = 0.015
            
                 There are four steps to calculating the Mean Deviation, first, subtract
                 the most recent 20-period average of the typical price from each period's
                 typical price. Second, take the absolute values of these numbers. Third,
                 sum the absolute values. Fourth, divide by the total number of periods (20).
             </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CommodityChannelIndex._k">
            <summary>This constant is used to ensure that CCI values fall between +100 and -100, 70% to 80% of the time</summary>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.MovingAverageType">
            <summary>
            Gets the type of moving average
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.TypicalPriceAverage">
            <summary>
            Keep track of the simple moving average of the typical price
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.TypicalPriceMeanDeviation">
            <summary>
            Keep track of the mean absolute deviation of the typical price
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the CommodityChannelIndex class
            </summary>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the CommodityChannelIndex class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CompositeIndicator`1">
            <summary>
            This indicator is capable of wiring up two separate indicators into a single indicator
            such that the output of each will be sent to a user specified function.
            </summary>
            <remarks>
            This type is initialized such that there is no need to call the Update function. This indicator
            will have its values automatically updated each time a new piece of data is received from both
            the left and right indicators.
            </remarks>
            <typeparam name="T">The type of data input into this indicator</typeparam>
        </member>
        <member name="T:QuantConnect.Indicators.CompositeIndicator`1.IndicatorComposer">
            <summary>
            Delegate type used to compose the output of two indicators into a new value.
            </summary>
            <remarks>
            A simple example would be to compute the difference between the two indicators (such as with MACD)
            (left, right) => left - right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>And indicator result representing the composition of the two indicators</returns>
        </member>
        <member name="F:QuantConnect.Indicators.CompositeIndicator`1._composer">
            <summary>function used to compose the individual indicators</summary>
        </member>
        <member name="P:QuantConnect.Indicators.CompositeIndicator`1.Left">
            <summary>
            Gets the 'left' indicator for the delegate
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CompositeIndicator`1.Right">
            <summary>
            Gets the 'right' indicator for the delegate
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CompositeIndicator`1.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator`1.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator`1.#ctor(System.String,QuantConnect.Indicators.IndicatorBase{`0},QuantConnect.Indicators.IndicatorBase{`0},QuantConnect.Indicators.CompositeIndicator{`0}.IndicatorComposer)">
            <summary>
            Creates a new CompositeIndicator capable of taking the output from the left and right indicators
            and producing a new value via the composer delegate specified
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="left">The left indicator for the 'composer'</param>
            <param name="right">The right indidcator for the 'composoer'</param>
            <param name="composer">Function used to compose the left and right indicators</param>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator`1.#ctor(QuantConnect.Indicators.IndicatorBase{`0},QuantConnect.Indicators.IndicatorBase{`0},QuantConnect.Indicators.CompositeIndicator{`0}.IndicatorComposer)">
            <summary>
            Creates a new CompositeIndicator capable of taking the output from the left and right indicators
            and producing a new value via the composer delegate specified
            </summary>
            <param name="left">The left indicator for the 'composer'</param>
            <param name="right">The right indidcator for the 'composoer'</param>
            <param name="composer">Function used to compose the left and right indicators</param>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator`1.ValidateAndComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            and returns an instance of the <see cref="T:QuantConnect.Indicators.IndicatorResult"/> class
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>An IndicatorResult object including the status of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <remarks>
            Since this class overrides <see cref="M:QuantConnect.Indicators.CompositeIndicator`1.ValidateAndComputeNextValue(`0)"/>, this method is a no-op
            </remarks>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator`1.ConfigureEventHandlers">
            <summary>
            Configures the event handlers for Left.Updated and Right.Updated to update this instance when
            they both have new data.
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ConstantIndicator`1">
            <summary>
            An indicator that will always return the same value.
            </summary>
            <typeparam name="T">The type of input this indicator takes</typeparam>
        </member>
        <member name="P:QuantConnect.Indicators.ConstantIndicator`1.IsReady">
            <summary>
            Gets true since the ConstantIndicator is always ready to return the same value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ConstantIndicator`1.#ctor(System.String,System.Decimal)">
            <summary>
            Creates a new ConstantIndicator that will always return the specified value
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="value">The constant value to be returned</param>
        </member>
        <member name="M:QuantConnect.Indicators.ConstantIndicator`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ConstantIndicator`1.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Delay">
            <summary>
            An indicator that delays its input for a certain period
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Delay.#ctor(System.Int32)">
            <summary>
            Creates a new Delay indicator that delays its input by the specified period
            </summary>
            <param name="period">The period to delay input, must be greater than zero</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delay.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Delay indicator that delays its input by the specified period
            </summary>
            <param name="name">Name of the delay window indicator</param>
            <param name="period">The period to delay input, must be greater than zero</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delay.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
                Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.ExponentialMovingAverage">
            <summary>
                Represents the traditional exponential moving average indicator (EMA)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the ExponentialMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the EMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>Initializes a new instance of the ExponentialMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the EMA</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the ExponentialMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the EMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.Int32,System.Decimal)">
            <summary>Initializes a new instance of the ExponentialMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the EMA</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.SmoothingFactorDefault(System.Int32)">
            <summary>Calculates the default smoothing factor for an ExponentialMovingAverage indicator
            </summary>
            <param name="period">The period of the EMA</param>
            <returns>The default smoothing factor</returns>
        </member>
        <member name="P:QuantConnect.Indicators.ExponentialMovingAverage.IsReady">
            <summary>
                Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
                Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.FunctionalIndicator`1">
            <summary>
            The functional indicator is used to lift any function into an indicator. This can be very useful
            when trying to combine output of several indicators, or for expression a mathematical equation
            </summary>
            <typeparam name="T">The input type for this indicator</typeparam>
        </member>
        <member name="F:QuantConnect.Indicators.FunctionalIndicator`1._isReady">
            <summary>function implementation of the IndicatorBase.IsReady property</summary>
        </member>
        <member name="F:QuantConnect.Indicators.FunctionalIndicator`1._reset">
            <summary>Action used to reset this indicator completely along with any indicators this one is dependent on</summary>
        </member>
        <member name="F:QuantConnect.Indicators.FunctionalIndicator`1._computeNextValue">
            <summary>function implementation of the IndicatorBase.ComputeNextValue method</summary>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.#ctor(System.String,System.Func{`0,System.Decimal},System.Func{QuantConnect.Indicators.IndicatorBase{`0},System.Boolean})">
            <summary>
            Creates a new FunctionalIndicator using the specified functions as its implementation.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="computeNextValue">A function accepting the input value and returning this indicator's output value</param>
            <param name="isReady">A function accepting this indicator and returning true if the indicator is ready, false otherwise</param>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.#ctor(System.String,System.Func{`0,System.Decimal},System.Func{QuantConnect.Indicators.IndicatorBase{`0},System.Boolean},System.Action)">
            <summary>
            Creates a new FunctionalIndicator using the specified functions as its implementation.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="computeNextValue">A function accepting the input value and returning this indicator's output value</param>
            <param name="isReady">A function accepting this indicator and returning true if the indicator is ready, false otherwise</param>
            <param name="reset">Function called to reset this indicator and any indicators this is dependent on</param>
        </member>
        <member name="P:QuantConnect.Indicators.FunctionalIndicator`1.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.Reset">
            <summary>
            Resets this indicator to its initial state, optionally using the reset action passed via the constructor
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Identity">
            <summary>
                Represents an indicator that is a ready after ingesting a single sample and
                always returns the same value as it is given.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Identity.#ctor(System.String)">
            <summary>
                Initializes a new instance of the Identity indicator with the specified name
            </summary>
            <param name="name">The name of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.Identity.IsReady">
            <summary>
                Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Identity.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
                Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Indicator">
            <summary>
            Represents a type capable of ingesting a piece of data and producing a new piece of data.
            Indicators can be used to filter and transform data into a new, more informative form.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Indicator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorBase`1">
            <summary>
            Provides a base type for all indicators
            </summary>
            <typeparam name="T">The type of data input into this indicator</typeparam>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorBase`1._previousInput">
            <summary>the most recent input that was given to this indicator</summary>
        </member>
        <member name="E:QuantConnect.Indicators.IndicatorBase`1.Updated">
            <summary>
            Event handler that fires after this indicator is updated
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase`1.Name">
            <summary>
            Gets a name for this indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase`1.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase`1.Current">
            <summary>
            Gets the current state of this indicator. If the state has not been updated
            then the time on the value will equal DateTime.MinValue.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase`1.Samples">
            <summary>
            Gets the number of samples processed by this indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.Update(`0)">
            <summary>
            Updates the state of this indicator with the given value and returns true
            if this indicator is ready, false otherwise
            </summary>
            <param name="input">The value to use to update this indicator</param>
            <returns>True if this indicator is ready, false otherwise</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.CompareTo(QuantConnect.Indicators.IIndicator{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj"/> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj"/>. Greater than zero This instance follows <paramref name="obj"/> in the sort order. 
            </returns>
            <param name="obj">An object to compare with this instance. </param><exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.ToString">
            <summary>
            ToString Overload for Indicator Base
            </summary>
            <returns>String representation of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.ToDetailedString">
            <summary>
            Provides a more detailed string of this indicator in the form of {Name} - {Value}
            </summary>
            <returns>A detailed string of this indicator's current state</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.ValidateAndComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            and returns an instance of the <see cref="T:QuantConnect.Indicators.IndicatorResult"/> class
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>An IndicatorResult object including the status of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.OnUpdated(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Event invocator for the Updated event
            </summary>
            <param name="consolidated">This is the new piece of data produced by this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Implicit(QuantConnect.Indicators.IndicatorBase{`0})~System.Decimal">
            <summary>
            Returns the current value of this instance
            </summary>
            <param name="instance">The indicator instance</param>
            <returns>The current value of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(QuantConnect.Indicators.IndicatorBase{`0},System.Double)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(QuantConnect.Indicators.IndicatorBase{`0},System.Double)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(System.Double,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(System.Double,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Double)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Double)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(System.Double,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(System.Double,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(QuantConnect.Indicators.IndicatorBase{`0},System.Double)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(QuantConnect.Indicators.IndicatorBase{`0},System.Double)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(System.Double,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(System.Double,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(QuantConnect.Indicators.IndicatorBase{`0},System.Single)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(QuantConnect.Indicators.IndicatorBase{`0},System.Single)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(System.Single,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(System.Single,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Single)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Single)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(System.Single,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(System.Single,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(QuantConnect.Indicators.IndicatorBase{`0},System.Single)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(QuantConnect.Indicators.IndicatorBase{`0},System.Single)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(System.Single,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(System.Single,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(QuantConnect.Indicators.IndicatorBase{`0},System.Int32)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(QuantConnect.Indicators.IndicatorBase{`0},System.Int32)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(System.Int32,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(System.Int32,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Int32)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Int32)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(System.Int32,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(System.Int32,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(QuantConnect.Indicators.IndicatorBase{`0},System.Int32)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(QuantConnect.Indicators.IndicatorBase{`0},System.Int32)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(System.Int32,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(System.Int32,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(QuantConnect.Indicators.IndicatorBase{`0},System.Int64)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(QuantConnect.Indicators.IndicatorBase{`0},System.Int64)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThan(System.Int64,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThan(System.Int64,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Int64)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase{`0},System.Int64)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_GreaterThanOrEqual(System.Int64,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_LessThanOrEqual(System.Int64,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(QuantConnect.Indicators.IndicatorBase{`0},System.Int64)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(QuantConnect.Indicators.IndicatorBase{`0},System.Int64)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Equality(System.Int64,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.op_Inequality(System.Int64,QuantConnect.Indicators.IndicatorBase{`0})">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorExtensions">
            <summary>
            Provides extension methods for Indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Update(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.DateTime,System.Decimal)">
            <summary>
            Updates the state of this indicator with the given value and returns true
            if this indicator is ready, false otherwise
            </summary>
            <param name="indicator">The indicator to be updated</param>
            <param name="time">The time associated with the value</param>
            <param name="value">The value to use to update this indicator</param>
            <returns>True if this indicator is ready, false otherwise</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Of``2(``1,QuantConnect.Indicators.IndicatorBase{``0},System.Boolean)">
            <summary>
            Configures the second indicator to receive automatic updates from the first by attaching an event handler
            to first.DataConsolidated
            </summary>
            <param name="second">The indicator that receives data from the first</param>
            <param name="first">The indicator that sends data via DataConsolidated even to the second</param>
            <param name="waitForFirstToReady">True to only send updates to the second if first.IsReady returns true, false to alway send updates to second</param>
            <returns>The reference to the second indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.WeightedBy``2(QuantConnect.Indicators.IndicatorBase{``0},``1,System.Int32)">
            <summary>
            Creates a new CompositeIndicator such that the result will be average of a first indicator weighted by a second one
            </summary>
            <param name="value">Indicator that will be averaged</param>
            <param name="weight">Indicator that provides the average weights</param>
            <param name="period">Average period</param>
            <returns>Indicator that results of the average of first by weights given by second</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and the constant
            </summary>
            <remarks>
            value = left + constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The addend</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint})">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and right
            </summary>
            <remarks>
            value = left + right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and right
            </summary>
            <remarks>
            value = left + right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and constant
            </summary>
            <remarks>
            value = left - constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The subtrahend</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint})">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and right
            </summary>
            <remarks>
            value = left - right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and right
            </summary>
            <remarks>
            value = left - right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the constant
            </summary>
            <remarks>
            value = left/constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The constant value denominator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint})">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the right
            </summary>
            <remarks>
            value = left/right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the right
            </summary>
            <remarks>
            value = left/right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left and the constant
            </summary>
            <remarks>
            value = left*constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The constant value to multiple by</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint})">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left to the right
            </summary>
            <remarks>
            value = left*right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left to the right
            </summary>
            <remarks>
            value = left*right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.EMA``1(QuantConnect.Indicators.IndicatorBase{``0},System.Int32,System.Nullable{System.Decimal},System.Boolean)">
            <summary>Creates a new ExponentialMovingAverage indicator with the specified period and smoothingFactor from the left indicator
            </summary>
            <param name="left">The ExponentialMovingAverage indicator will be created using the data from left</param>
            <param name="period">The period of the ExponentialMovingAverage indicators</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to alway send updates</param>
            <returns>A reference to the ExponentialMovingAverage indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.MAX``1(QuantConnect.Indicators.IndicatorBase{``0},System.Int32,System.Boolean)">
            <summary>Creates a new Maximum indicator with the specified period from the left indicator
            </summary>
            <param name="left">The Maximum indicator will be created using the data from left</param>
            <param name="period">The period of the Maximum indicator</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to alway send updates</param>
            <returns>A reference to the Maximum indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.MIN``1(QuantConnect.Indicators.IndicatorBase{``0},System.Int32,System.Boolean)">
            <summary>Creates a new Minimum indicator with the specified period from the left indicator
            </summary>
            <param name="left">The Minimum indicator will be created using the data from left</param>
            <param name="period">The period of the Minimum indicator</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to alway send updates</param>
            <returns>A reference to the Minimum indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.SMA``1(QuantConnect.Indicators.IndicatorBase{``0},System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the SimpleMovingAverage class with the specified name and period from the left indicator
            </summary>
            <param name="left">The SimpleMovingAverage indicator will be created using the data from left</param>
            <param name="period">The period of the SMA</param>
            <param name="waitForFirstToReady">True to only send updates to the second if first.IsReady returns true, false to alway send updates to second</param>
            <returns>The reference to the SimpleMovingAverage indicator to allow for method chaining</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MeanAbsoluteDeviation">
            <summary>
            This indicator computes the n-period mean absolute deviation.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MeanAbsoluteDeviation.Mean">
            <summary>
            Gets the mean used to compute the deviation
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the MeanAbsoluteDeviation class with the specified period.
            
             Evaluates the mean absolute deviation of samples in the lookback period.
             </summary>
             <param name="period">The sample size of the standard deviation</param>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the MeanAbsoluteDeviation class with the specified period.
            
             Evaluates the mean absolute deviation of samples in the lookback period.
             </summary>
             <param name="name">The name of this indicator</param>
             <param name="period">The sample size of the mean absoluate deviation</param>
        </member>
        <member name="P:QuantConnect.Indicators.MeanAbsoluteDeviation.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.Reset">
            <summary>
            Resets this indicator and its sub-indicator Mean to their initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Minimum">
            <summary>
            Represents an indictor capable of tracking the minimum value and how many periods ago it occurred
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Minimum.PeriodsSinceMinimum">
            <summary>
            The number of periods since the minimum value was encountered
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Minimum.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.#ctor(System.Int32)">
            <summary>
            Creates a new Minimum indicator with the specified period
            </summary>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Minimum indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <inheritdoc />
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Momentum">
            <summary>
            This indicator computes the n-period change in a value using the following:
            value_0 - value_n
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Momentum.#ctor(System.Int32)">
            <summary>
            Creates a new Momentum indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.Momentum.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Momentum indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.Momentum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MomentumPercent">
            <summary>
            This indicator computes the n-period percentage rate of change in a value using the following:
            100 * (value_0 - value_n) / value_n
            
            This indicator yields the same results of RateOfChangePercent
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomentumPercent.#ctor(System.Int32)">
            <summary>
            Creates a new MomentumPercent indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.MomentumPercent.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new MomentumPercent indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="T:QuantConnect.Indicators.MoneyFlowIndex">
            <summary>
                The Money Flow Index (MFI) is an oscillator that uses both price and volume to 
                measure buying and selling pressure
                
                Typical Price = (High + Low + Close)/3
                Money Flow = Typical Price x Volume
                Positve Money Flow = Sum of the money flows of all days where the typical 
                    price is greater than the previous day's typical price
                Negative Money Flow = Sum of the money flows of all days where the typical 
                    price is less than the previous day's typical price
                Money Flow Ratio = (14-period Positive Money Flow)/(14-period Negative Money Flow)
                
                Money Flow Index = 100 x  Positve Money Flow / ( Positve Money Flow + Negative Money Flow)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.PositiveMoneyFlow">
            <summary>The sum of positive money flow to compute money flow ratio</summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.NegativeMoneyFlow">
            <summary>The sum of negative money flow to compute money flow ratio</summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.PreviousTypicalPrice">
            <summary>The current and previous typical price is used to determine postive or negative money flow</summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MoneyFlowIndex class
            </summary>
            <param name="period">The period of the negative and postive money flow</param>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the MoneyFlowIndex class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the negative and postive money flow</param>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MovingAverageConvergenceDivergence">
            <summary>
            This indicator creates two moving averages defined on a base indicator and produces the difference
            between the fast and slow averages.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Fast">
            <summary>
            Gets the fast average indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Slow">
            <summary>
            Gets the slow average indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Signal">
            <summary>
            Gets the signal of the MACD
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.#ctor(System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new MACD with the specified parameters
            </summary>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="signalPeriod">The signal period</param>
            <param name="type">The type of moving averages to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.#ctor(System.String,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new MACD with the specified parameters
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="signalPeriod">The signal period</param>
            <param name="type">The type of moving averages to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MovingAverageType">
            <summary>
            Defines the different types of moving averages
            </summary>  
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Simple">
            <summary>
            An unweighted, arithmetic mean
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Exponential">
            <summary>
            The standard exponential moving average, using a smoothing factor of 2/(n+1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Wilders">
            <summary>
            The standard exponential moving average, using a smoothing factor of 1/n
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.LinearWeightedMovingAverage">
            <summary>
            A weighted moving average type
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.DoubleExponential">
            <summary>
            The double exponential moving average
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.TripleExponential">
            <summary>
            The triple exponential moving average
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Triangular">
            <summary>
            The triangular moving average
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.T3">
            <summary>
            The T3 moving average
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Kama">
            <summary>
            The Kaufman Adaptive Moving Average
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RateOfChange">
            <summary>
            This indicator computes the n-period rate of change in a value using the following:
            (value_0 - value_n) / value_n
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChange.#ctor(System.Int32)">
            <summary>
            Creates a new RateOfChange indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChange.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new RateOfChange indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChange.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.RateOfChangePercent">
            <summary>
            This indicator computes the n-period percentage rate of change in a value using the following:
            100 * (value_0 - value_n) / value_n
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangePercent.#ctor(System.Int32)">
            <summary>
            Creates a new RateOfChangePercent indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangePercent.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new RateOfChangePercent indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangePercent.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.RelativeStrengthIndex">
            <summary>
            Represents the  Relative Strength Index (RSI) developed by K. Welles Wilder.
            You can optionally specified a different moving average type to be used in the computation
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.MovingAverageType">
            <summary>
            Gets the type of indicator used to compute AverageGain and AverageLoss
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.AverageLoss">
            <summary>
            Gets the EMA for the down days
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.AverageGain">
            <summary>
            Gets the indicator for average gain
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the RelativeStrengthIndex class with the specified name and period
            </summary>
            <param name="period">The period used for up and down days</param>
            <param name="movingAverageType">The type of moving average to be used for computing the average gain/loss values</param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the RelativeStrengthIndex class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period used for up and down days</param>
            <param name="movingAverageType">The type of moving average to be used for computing the average gain/loss values</param>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Stochastic">
            <summary>
            This indicator computes the Slow Stochastics %K and %D. The Fast Stochastics %K is is computed by 
            (Current Close Price - Lowest Price of given Period) / (Highest Price of given Period - Lowest Price of given Period)
            multiplied by 100. Once the Fast Stochastics %K is calculated the Slow Stochastic %K is calculated by the average/smoothed price of
            of the Fast %K with the given period. The Slow Stochastics %D is then derived from the Slow Stochastics %K with the given period.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.FastStoch">
            <summary>
            Gets the value of the Fast Stochastics %K given Period.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.StochK">
            <summary>
            Gets the value of the Slow Stochastics given Period K.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.StochD">
            <summary>
            Gets the value of the Slow Stochastics given Period D.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Stochastics Indicator from the specified periods.
            </summary>
            <param name="name">The name of this indicator.</param>
            <param name="period">The period given to calculate the Fast %K</param>
            <param name="kPeriod">The K period given to calculated the Slow %K</param>
            <param name="dPeriod">The D period given to calculated the Slow %D</param>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.Stochastic"/> indicator from the specified inputs.
            </summary>
            <param name="period">The period given to calculate the Fast %K</param>
            <param name="kPeriod">The K period given to calculated the Slow %K</param>
            <param name="dPeriod">The D period given to calculated the Slow %D</param>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeFastStoch(System.Int32,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the Fast Stochastic %K.
            </summary>
            <param name="period">The period.</param>
            <param name="input">The input.</param>
            <returns>The Fast Stochastics %K value.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeStochK(System.Int32,System.Int32,QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the Slow Stochastic %K.
            </summary>
            <param name="period">The period.</param>
            <param name="constantK">The constant k.</param>
            <param name="input">The input.</param>
            <returns>The Slow Stochastics %K value.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeStochD(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the Slow Stochastic %D.
            </summary>
            <param name="period">The period.</param>
            <param name="constantK">The constant k.</param>
            <param name="constantD">The constant d.</param>
            <returns>The Slow Stochastics %D value.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Sum">
            <summary>
            Represents an indictor capable of tracking the sum for the given period
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Sum._sum">
            <summary>The sum for the given period</summary>
        </member>
        <member name="P:QuantConnect.Indicators.Sum.IsReady">
            <summary>
                Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the Sum class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the Sum class with the default name and period
            </summary>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
                Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.SimpleMovingAverage">
            <summary>
                Represents the traditional simple moving average indicator (SMA)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SimpleMovingAverage.RollingSum">
            <summary>A rolling sum for computing the average for the given period</summary>
        </member>
        <member name="P:QuantConnect.Indicators.SimpleMovingAverage.IsReady">
            <summary>
                Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the SimpleMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the SimpleMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
                Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MovingAverageTypeExtensions">
            <summary>
            Provides extension methods for the MovingAverageType enumeration
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageTypeExtensions.AsIndicator(QuantConnect.Indicators.MovingAverageType,System.Int32)">
            <summary>
            Creates a new indicator from the specified MovingAverageType. So if MovingAverageType.Simple
            is specified, then a new SimpleMovingAverage will be returned.
            </summary>
            <param name="movingAverageType">The type of averaging indicator to create</param>
            <param name="period">The smoothing period</param>
            <returns>A new indicator that matches the MovingAverageType</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageTypeExtensions.AsIndicator(QuantConnect.Indicators.MovingAverageType,System.String,System.Int32)">
            <summary>
            Creates a new indicator from the specified MovingAverageType. So if MovingAverageType.Simple
            is specified, then a new SimpleMovingAverage will be returned.
            </summary>
            <param name="movingAverageType">The type of averaging indicator to create</param>
            <param name="name">The name of the new indicator</param>
            <param name="period">The smoothing period</param>
            <returns>A new indicator that matches the MovingAverageType</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Maximum">
            <summary>
            Represents an indictor capable of tracking the maximum value and how many periods ago it occurred
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Maximum.PeriodsSinceMaximum">
            <summary>
            The number of periods since the maximum value was encountered
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Maximum.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.#ctor(System.Int32)">
            <summary>
            Creates a new Maximum indicator with the specified period
            </summary>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Maximum indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <inheritdoc />
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.TradeBarIndicator">
            <summary>
            The TradeBarIndicator is an indicator that accepts TradeBar data as its input.
            
            This type is more of a shim/typedef to reduce the need to refer to things as IndicatorBase&lt;TradeBar&gt;
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TradeBarIndicator.#ctor(System.String)">
            <summary>
            Creates a new TradeBarIndicator with the specified name
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="T:QuantConnect.Indicators.WindowIndicator`1">
            <summary>
                Represents an indicator that acts on a rolling window of data
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WindowIndicator`1.Period">
            <summary>
            Gets the period of this window indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the WindowIndicator class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The number of data points to hold in the window</param>
        </member>
        <member name="P:QuantConnect.Indicators.WindowIndicator`1.IsReady">
            <summary>
                Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.ComputeNextValue(`0)">
            <summary>
                Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.Reset">
            <summary>
                Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{`0},`0)">
            <summary>
                Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.StandardDeviation">
            <summary>
            This indicator computes the n-period population standard deviation.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.StandardDeviation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the StandardDeviation class with the specified period.
            
            Evaluates the standard deviation of samples in the lookback period. 
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            </summary>
            <param name="period">The sample size of the standard deviation</param>
        </member>
        <member name="M:QuantConnect.Indicators.StandardDeviation.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the StandardDeviation class with the specified name and period.
            
            Evaluates the standard deviation of samples in the lookback period. 
            On a dataset of size N will use an N normalizer and would thus be biased if applied to a subset.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The sample size of the standard deviation</param>
        </member>
        <member name="P:QuantConnect.Indicators.StandardDeviation.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.StandardDeviation.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.BollingerBands">
            <summary>
            This indicator creates a moving average (middle band) with an upper band and lower band
            fixed at k standard deviations above and below the moving average.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.MovingAverageType">
            <summary>
            Gets the type of moving average
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.StandardDeviation">
            <summary>
            Gets the standard deviation
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.MiddleBand">
            <summary>
            Gets the middle bollinger band (moving average)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.UpperBand">
            <summary>
            Gets the upper bollinger band (middleBand + k * stdDev)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.LowerBand">
            <summary>
            Gets the lower bollinger band (middleBand - k * stdDev)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.#ctor(System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the BollingerBands class
            </summary>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="k">The number of standard deviations specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.#ctor(System.String,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the BollingerBands class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="k">The number of standard deviations specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of the following sub-indicators from the given state:
            StandardDeviation, MiddleBand, UpperBand, LowerBand
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>The input is returned unmodified.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.Reset">
            <summary>
            Resets this indicator and all sub-indicators (StandardDeviation, LowerBand, MiddleBand, UpperBand)
            </summary>
        </member>
    </members>
</doc>
