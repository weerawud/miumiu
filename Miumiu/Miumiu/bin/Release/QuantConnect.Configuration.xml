<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Configuration</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Configuration.Config">
            <summary>
            Configuration class loads the required external setup variables to launch the Lean engine.
            </summary>
        </member>
        <member name="M:QuantConnect.Configuration.Config.GetEnvironment">
            <summary>
            Gets the currently selected environment. If sub-environments are defined,
            they'll be returned as {env1}.{env2}
            </summary>
            <returns>The fully qualified currently selected environment</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.Get(System.String,System.String)">
            <summary>
            Get the matching config setting from the file searching for this key.
            </summary>
            <param name="key">String key value we're seaching for in the config file.</param>
            <param name="defaultValue"></param>
            <returns>String value of the configuration setting or empty string if nothing found.</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.GetToken(System.String)">
            <summary>
            Gets the underlying JToken for the specified key
            </summary>
        </member>
        <member name="M:QuantConnect.Configuration.Config.Set(System.String,System.String)">
            <summary>
            Sets a configuration value. This is really only used to help testing. The key heye can be
            specified as {environment}.key to set a value on a specific environment
            </summary>
            <param name="key">The key to be set</param>
            <param name="value">The new value</param>
        </member>
        <member name="M:QuantConnect.Configuration.Config.GetBool(System.String,System.Boolean)">
            <summary>
            Get a boolean value configuration setting by a configuration key.
            </summary>
            <param name="key">String value of the configuration key.</param>
            <param name="defaultValue">The default value to use if not found in configuration</param>
            <returns>Boolean value of the config setting.</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.GetInt(System.String,System.Int32)">
            <summary>
            Get the int value of a config string.
            </summary>
            <param name="key">Search key from the config file</param>
            <param name="defaultValue">The default value to use if not found in configuration</param>
            <returns>Int value of the config setting.</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.GetDouble(System.String,System.Double)">
            <summary>
            Get the double value of a config string.
            </summary>
            <param name="key">Search key from the config file</param>
            <param name="defaultValue">The default value to use if not found in configuration</param>
            <returns>Double value of the config setting.</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.GetValue``1(System.String,``0)">
            <summary>
            Gets a value from configuration and converts it to the requested type, assigning a default if
            the configuration is null or empty
            </summary>
            <typeparam name="T">The requested type</typeparam>
            <param name="key">Search key from the config file</param>
            <param name="defaultValue">The default value to use if not found in configuration</param>
            <returns>Converted value of the config setting.</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to find the specified key and parse it as a T, using
            default(T) if unable to locate the key or unable to parse it
            </summary>
            <typeparam name="T">The desired output type</typeparam>
            <param name="key">The configuration key</param>
            <param name="value">The output value</param>
            <returns>True on successful parse, false when output value is default(T)</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.TryGetValue``1(System.String,``0,``0@)">
            <summary>
            Tries to find the specified key and parse it as a T, using
            defaultValue if unable to locate the key or unable to parse it
            </summary>
            <typeparam name="T">The desired output type</typeparam>
            <param name="key">The configuration key</param>
            <param name="defaultValue">The default value to use on key not found or unsuccessful parse</param>
            <param name="value">The output value</param>
            <returns>True on successful parse, false when output value is defaultValue</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.Write">
            <summary>
            Write the contents of the serialized configuration back to the disk.
            </summary>
        </member>
        <member name="M:QuantConnect.Configuration.Config.Flatten(System.String)">
            <summary>
            Flattens the jobject with respect to the selected environment and then
            removes the 'environments' node
            </summary>
            <param name="overrideEnvironment">The environment to use</param>
            <returns>The flattened JObject</returns>
        </member>
        <member name="M:QuantConnect.Configuration.Config.Flatten(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Flattens the jobject with respect to the selected environment and then
            removes the 'environments' node
            </summary>
            <param name="config">The configuration represented as a JObject</param>
            <param name="overrideEnvironment">The environment to use</param>
            <returns>The flattened JObject</returns>
        </member>
    </members>
</doc>
